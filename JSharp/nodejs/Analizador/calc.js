/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,12],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[5,12,17,65,66,67,68,69,70,71],$Va=[1,26],$Vb=[18,61,62],$Vc=[2,97],$Vd=[1,34],$Ve=[5,12,14,15,17,65,66,67,68,69,70,71],$Vf=[5,12,17,27,33,36,39,40,45,48,49,52,65,66,67,68,69,70,71],$Vg=[1,41],$Vh=[1,39],$Vi=[1,40],$Vj=[2,72],$Vk=[1,45],$Vl=[2,73],$Vm=[1,58],$Vn=[1,52],$Vo=[1,51],$Vp=[1,50],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,59],$Vv=[1,60],$Vw=[1,61],$Vx=[1,78],$Vy=[1,79],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[1,86],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[1,93],$VN=[5,12,14,17,27,30,33,36,37,39,40,45,48,49,52,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],$VO=[1,101],$VP=[15,30],$VQ=[5,12,14,15,17,27,33,36,39,40,45,48,49,52,61,62,65,66,67,68,69,70,71],$VR=[5,12,14,17,27,30,33,36,37,39,40,45,48,49,52,65,66,67,68,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87],$VS=[1,137],$VT=[1,143],$VU=[1,142],$VV=[1,139],$VW=[1,140],$VX=[1,141],$VY=[1,138],$VZ=[5,12,14,17,27,30,33,36,37,39,40,45,48,49,52,65,66,67,68,69,70,71,72,74,75,77,78,79,80,81,82,83,84,85,86,87],$V_=[5,12,14,17,27,30,33,36,37,39,40,45,48,49,52,65,66,67,68,69,70,71,77,78,79,80,81,83,84,85,86,87],$V$=[5,12,14,17,27,30,33,36,37,39,40,45,48,49,52,65,66,67,68,69,70,71,77,83,84,85,86,87],$V01=[17,27,33,36,39,40,45,48,49,52,65,66,67,68,69,70,71],$V11=[1,202],$V21=[1,203],$V31=[1,224],$V41=[1,225],$V51=[33,36,39],$V61=[1,238],$V71=[17,27,33,36,39,40,45,48,49,50,52,65,66,67,68,69,70,71];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"raiz":4,"EOF":5,"listaCuerpo":6,"sentenciasCuerpo":7,"importar":8,"declaracion_variables":9,"asignacion":10,"declaracionFuncion":11,"import":12,"imports":13,";":14,",":15,"nombremports":16,"id":17,".":18,"bloque":19,"sentenciasBloque":20,"imprmir":21,"sentenciasif":22,"sentenciaWhile":23,"sentenciaDoWhile":24,"sentenciaFor":25,"sentenciaSwitch":26,"switch":27,"(":28,"EXP":29,")":30,"{":31,"bloqueSwitch":32,"}":33,"listaBloqueSwitch":34,"sentenciaDefault":35,"default":36,":":37,"sentenciaCase":38,"case":39,"for":40,"instruccionesFor":41,"inicioFor":42,"declaracionVariablesFor":43,"asignacionFor":44,"if":45,"sentencaElse":46,"listaElseIf":47,"while":48,"do":49,"else":50,"elseIf":51,"print":52,"tipoDato":53,"patametros":54,"patametro":55,"tipoVCG":56,"inicializador_variable":57,"listaIds":58,"inicializadorVariableFor":59,"listaIds2":60,":=":61,"=":62,"listaIdVecFun":63,"tipoId":64,"integer":65,"char":66,"boolean":67,"void":68,"var":69,"const":70,"global":71,"+":72,"-":73,"*":74,"/":75,"^^":76,"^":77,"<":78,">":79,"<=":80,">=":81,"%":82,"<>":83,"&&":84,"||":85,"==":86,"===":87,"!":88,"literal":89,"entero":90,"decimal":91,"cadena":92,"caracter":93,"true":94,"false":95,"null":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"import",14:";",15:",",17:"id",18:".",27:"switch",28:"(",30:")",31:"{",33:"}",36:"default",37:":",39:"case",40:"for",45:"if",48:"while",49:"do",50:"else",52:"print",61:":=",62:"=",65:"integer",66:"char",67:"boolean",68:"void",69:"var",70:"const",71:"global",72:"+",73:"-",74:"*",75:"/",76:"^^",77:"^",78:"<",79:">",80:"<=",81:">=",82:"%",83:"<>",84:"&&",85:"||",86:"==",87:"===",88:"!",90:"entero",91:"decimal",92:"cadena",93:"caracter",94:"true",95:"false",96:"null"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,1],[7,1],[8,2],[8,3],[13,3],[13,1],[16,3],[19,2],[19,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[26,7],[32,2],[32,1],[32,1],[35,3],[35,2],[38,3],[38,4],[34,2],[34,1],[25,7],[41,5],[41,4],[41,4],[41,4],[41,3],[41,3],[41,2],[42,1],[42,1],[22,7],[22,8],[22,9],[22,8],[23,7],[24,8],[24,9],[46,4],[47,2],[47,1],[51,8],[21,4],[21,5],[11,8],[11,8],[11,7],[11,7],[54,3],[54,1],[55,2],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,2],[9,2],[9,2],[43,3],[43,3],[43,3],[43,3],[43,3],[58,3],[60,3],[60,1],[57,3],[57,2],[57,3],[57,2],[57,1],[59,2],[59,2],[10,4],[10,3],[10,4],[10,3],[44,3],[44,3],[63,3],[63,1],[64,1],[53,1],[53,1],[53,1],[53,1],[56,1],[56,1],[56,1],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,2],[29,3],[29,1],[89,1],[89,1],[89,1],[89,1],[89,1],[89,1],[89,1],[89,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
this.$ = yy.ast.hijos = $$[$0]
break;
case 3: case 14: case 32: case 52:

            $$[$0-1].setHijo($$[$0])
            this.$ = $$[$0-1]
        
break;
case 4:

            this.$ = yy.crearNodo('cuerpo',0,0,[$$[$0]])
        
break;
case 5: case 6: case 7: case 8: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 42: case 43:
this.$ = $$[$0];
break;
case 9:
yy.imprimirToquen($$[$0]); this.$ = yy.crearNodo('import',0,0,[$$[$0]])
break;
case 10:
this.$ = yy.crearNodo('import',0,0,[$$[$0-1]])
break;
case 11: case 61:

            $$[$0-2].setHijo($$[$0])
            this.$ = $$[$0-2]
        
break;
case 12:

            this.$ = yy.crearNodo('imports',0,0,[$$[$0]])
        
break;
case 13:

        this.$ = yy.crearNodo('nombre',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)])   
    
break;
case 15:

            this.$ = yy.crearNodo('bloque',0,0,[$$[$0]])
        
break;
case 24:

            this.$ = yy.crearNodo('switch',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-4],$$[$0-1]])
        
break;
case 25:

            this.$ = yy.crearNodo('bloqueSwitch',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-1],$$[$0]])
        
break;
case 26:

                this.$ = yy.crearNodo('bloqueSwitchCases',_$[$0].first_line,_$[$0].first_column,[$$[$0]])
        
break;
case 27:

                this.$ = yy.crearNodo('bloqueSwitchDefault',_$[$0].first_line,_$[$0].first_column,[$$[$0]])
        
break;
case 28:

            this.$ = yy.crearNodo('default',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0]])
        
break;
case 29:

            this.$ = yy.crearNodo('default',_$[$0-1].first_line,_$[$0-1].first_column,[])
        
break;
case 30:

            this.$ = yy.crearNodo('case',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0-1]])
        
break;
case 31:

            this.$ = yy.crearNodo('case',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-2],$$[$0]])
        
break;
case 33:

            this.$ = yy.crearNodo('listaSwitch',0,0,[$$[$0]])
        
break;
case 34:

        this.$ = yy.crearNodo('for',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-4],$$[$0-1]])
    
break;
case 35:

            instruccion1 = yy.crearNodo('instruccion1',_$[$0-4].first_line,_$[$0-4].first_column,[$$[$0-4]]) 
            instruccion2 = yy.crearNodo('instruccion2',_$[$0-4].first_line,_$[$0-4].first_column,[$$[$0-2]])    
            instruccion3 = yy.crearNodo('instruccion3',_$[$0-4].first_line,_$[$0-4].first_column,[$$[$0]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-4].first_line,_$[$0-4].first_column,[instruccion1,instruccion2,instruccion3])
        
break;
case 36:

            instruccion1 = yy.crearNodo('instruccion1',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-3]])    
            instruccion3 = yy.crearNodo('instruccion3',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-3].first_line,_$[$0-3].first_column,[instruccion1,instruccion3])
        
break;
case 37:

            instruccion1 = yy.crearNodo('instruccion1',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-3]])    
            instruccion2 = yy.crearNodo('instruccion2',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-1]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-3].first_line,_$[$0-3].first_column,[instruccion1,instruccion2])
        
break;
case 38:

            instruccion2 = yy.crearNodo('instruccion2',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-2]])    
            instruccion3 = yy.crearNodo('instruccion3',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-3].first_line,_$[$0-3].first_column,[instruccion2,instruccion3])
        
break;
case 39:

            instruccion2 = yy.crearNodo('instruccion2',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0-1]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-2].first_line,_$[$0-2].first_column,[instruccion2])
        
break;
case 40:

            instruccion3 = yy.crearNodo('instruccion3',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-2].first_line,_$[$0-2].first_column,[instruccion3])
        
break;
case 41:
this.$ = yy.crearNodo('instrucciones',_$[$0-1].first_line,_$[$0-1].first_column,[])
break;
case 44:

            bloque = yy.crearNodo('if',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-4],$$[$0-1]])
            nodoIf = yy.crearNodo('ifs',_$[$0-6].first_line,_$[$0-6].first_column,[bloque])      
            this.$ = yy.crearNodo('ifInstruccion',_$[$0-6].first_line,_$[$0-6].first_column,[nodoIf])
        
break;
case 45:

            bloque = yy.crearNodo('if',_$[$0-7].first_line,_$[$0-7].first_column,[$$[$0-5],$$[$0-2]])    
            nodoIf = yy.crearNodo('ifs',_$[$0-7].first_line,_$[$0-7].first_column,[bloque])      
            this.$ = yy.crearNodo('ifInstruccion',_$[$0-7].first_line,_$[$0-7].first_column,[nodoIf,$$[$0]])
        
break;
case 46:

            bloque = yy.crearNodo('if',_$[$0-8].first_line,_$[$0-8].first_column,[$$[$0-6],$$[$0-3]])    
            nodoIf = yy.crearNodo('ifs',_$[$0-8].first_line,_$[$0-8].first_column,[bloque,$$[$0-1]])      
            this.$ = yy.crearNodo('ifInstruccion',_$[$0-8].first_line,_$[$0-8].first_column,[nodoIf,$$[$0]])
        
break;
case 47:

            bloque = yy.crearNodo('if',_$[$0-7].first_line,_$[$0-7].first_column,[$$[$0-5],$$[$0-2]])    
            nodoIf = yy.crearNodo('ifs',_$[$0-7].first_line,_$[$0-7].first_column,[bloque,$$[$0]])      
            this.$ = yy.crearNodo('ifInstruccion',_$[$0-7].first_line,_$[$0-7].first_column,[nodoIf])
        
break;
case 48:

        this.$ = yy.crearNodo('while',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-4],$$[$0-1]])
    
break;
case 49:

            this.$ = yy.crearNodo('do while',_$[$0-7].first_line,_$[$0-7].first_column,[$$[$0-5],$$[$0-1]])
        
break;
case 50:

            this.$ = yy.crearNodo('do while',_$[$0-8].first_line,_$[$0-8].first_column,[$$[$0-6],$$[$0-2]])
        
break;
case 51:

        this.$ = yy.crearNodo('else',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-1]])
    
break;
case 53:

            this.$ = yy.crearNodo('lista else if',0,0,[$$[$0]])
        
break;
case 54:

        this.$ = yy.crearNodo('else if',_$[$0-7].first_line,_$[$0-7].first_column,[$$[$0-4],$$[$0-1]])
    
break;
case 55:
this.$ = yy.crearNodo('print',_$[$0-3].first_line,_$[$0-3].first_column,[yy.crearNodo('EXP',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-1]])])
break;
case 56:
this.$ = yy.crearNodo('print',_$[$0-4].first_line,_$[$0-4].first_column,[yy.crearNodo('EXP',_$[$0-4].first_line,_$[$0-4].first_column,[$$[$0-2]])])
break;
case 57:

		this.$ = yy.crearNodo('declaracionFuncion',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-7],yy.crearHoja($$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column),$$[$0-4],$$[$0-1]])
	
break;
case 58:

		this.$ = yy.crearNodo('declaracionFuncion',_$[$0-6].first_line,_$[$0-6].first_column,[yy.crearHoja($$[$0-7],_$[$0-7].first_line,_$[$0-7].first_column),yy.crearHoja($$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column),$$[$0-4],$$[$0-1]])
	
break;
case 59:

		this.$ = yy.crearNodo('declaracionFuncion',_$[$0-5].first_line,_$[$0-5].first_column,[$$[$0-6],yy.crearHoja($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column),$$[$0-1]])
	
break;
case 60:

		this.$ = yy.crearNodo('declaracionFuncion',_$[$0-5].first_line,_$[$0-5].first_column,[yy.crearHoja($$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column),yy.crearHoja($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column),$$[$0-1]])
	
break;
case 62:

            this.$ = yy.crearNodo('patametros',0,0,[$$[$0]])
        
break;
case 63:
this.$ = yy.crearNodo('parametro',_$[$0].first_line,_$[$0].first_column,[$$[$0-1],yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)])
break;
case 64: case 74:

            this.$ = yy.crearNodo('inicializando variable sin tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
        
break;
case 65: case 75:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],$$[$0-1],$$[$0]]);
        
break;
case 66: case 76:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),$$[$0-1],$$[$0]]);
        
break;
case 67: case 77:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
        
break;
case 68: case 78:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
        
break;
case 69:

            this.$ = yy.crearNodo('inicializando variable sin tipo',0,0,[$$[$0-1],yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column),$$[$01]]);
        
break;
case 70:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-1],$$[$0]]);
        
break;
case 71:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
        
break;
case 72:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-1],yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)]);
        
break;
case 73:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)]);
        
break;
case 79:
 
            $$[$0].setHijo(yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column))
            this.$ = $$[$0]
        
break;
case 80:

            $$[$0-2].setHijo(yy.crearHoja($$[$0],0,0))
            this.$ = $$[$0-2]
        
break;
case 81:
            
            this.$ = yy.crearNodo('listaIds',0,0,[yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)])
        
break;
case 82:
this.$ = yy.crearNodo('EXP',0,0,[$$[$0-1]]);
break;
case 83: case 85: case 87: case 88:
this.$ = yy.crearNodo('EXP',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0]]);
break;
case 84:
this.$ = yy.crearNodo('EXP',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0-1]]);
break;
case 86:
this.$ = {}
break;
case 89: case 91:

            this.$ = yy.crearNodo('asignacion',0,0,[$$[$0-3],$$[$0-1]]);
        
break;
case 90: case 92:

            this.$ = yy.crearNodo('asignacion',0,0,[$$[$0-2],$$[$0]]);
        
break;
case 93: case 94:

            this.$ = yy.crearNodo('asignacion',0,0,[[$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column],$$[$0]]);
        
break;
case 95:
            
            $$[$0-2].setHijo(yy.crearHoja($$[$0],0,0))
        
break;
case 96:

            this.$ = yy.crearNodo('identificadorAsignacion',0,0,[$$[$0]])
        
break;
case 97:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('identificador',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 98:
this.$ = yy.crearHoja('integer',_$[$0].first_line,_$[$0].first_column)
break;
case 99:
this.$ = yy.crearHoja('char',_$[$0].first_line,_$[$0].first_column)
break;
case 100:
this.$ = yy.crearHoja('boolean',_$[$0].first_line,_$[$0].first_column)
break;
case 101:
this.$ = yy.crearHoja('void',_$[$0].first_line,_$[$0].first_column)
break;
case 102:
this.$ = yy.crearHoja('var',_$[$0].first_line,_$[$0].first_column)
break;
case 103:
this.$ = yy.crearHoja('const',_$[$0].first_line,_$[$0].first_column)
break;
case 104:
this.$ = yy.crearHoja('global',_$[$0].first_line,_$[$0].first_column)
break;
case 105:
this.$ = yy.crearNodo('+',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 106:
this.$ = yy.crearNodo('-',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 107:
this.$ = yy.crearNodo('*',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 108:
this.$ = yy.crearNodo('/',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 109:
this.$ = yy.crearNodo('^^',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 110:
this.$ = yy.crearNodo('^',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 111:
this.$ = yy.crearNodo('<',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 112:
this.$ = yy.crearNodo('>',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 113:
this.$ = yy.crearNodo('<=',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 114:
this.$ = yy.crearNodo('>=',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 115:
this.$ = yy.crearNodo('%',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 116:
this.$ = yy.crearNodo('<>',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 117:
this.$ = yy.crearNodo('&&',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 118:
this.$ = yy.crearNodo('||',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 119:
this.$ = yy.crearNodo('==',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 120:
this.$ = yy.crearNodo('===',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 121:
this.$ = yy.crearNodo('!',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0]])
break;
case 122:
this.$ = yy.crearNodo('-',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0]])
break;
case 123:
this.$ = $$[$0-1];
break;
case 124:
this.$ = yy.crearNodo('literal',0,0,[$$[$0]])
break;
case 125:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('entero',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 126:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('decimal',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 127:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('cadena',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 128:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('caracter',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 129:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('identificacdor',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 130: case 131:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('boleano',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 132:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('nulo',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,17:$V1,53:11,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{1:[3]},{5:[1,22]},{5:[2,2],7:23,8:5,9:6,10:7,11:8,12:$V0,17:$V1,53:11,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),{13:24,16:25,17:$Va},{17:[1,27]},{17:[1,29],58:28},o($Vb,$Vc,{58:30,17:[1,31]}),{18:$Vd,61:[1,33],62:[1,32]},{17:[2,102]},{17:[2,103]},{17:[2,104]},{17:[2,98]},{17:[2,99]},{17:[2,100]},{17:[2,101]},o($Vb,[2,96]),{1:[2,1]},o($V9,[2,3]),o($V9,[2,9],{14:[1,35],15:[1,36]}),o($Ve,[2,12]),{18:[1,37]},o($Vf,[2,69],{57:38,14:$Vg,61:$Vh,62:$Vi}),o($Vf,[2,70],{57:42,14:$Vg,61:$Vh,62:$Vi}),o($V9,$Vj,{57:43,14:$Vg,15:$Vk,28:[1,44],61:$Vh,62:$Vi}),o($Vf,[2,71],{57:46,14:$Vg,61:$Vh,62:$Vi}),o($V9,$Vl,{57:47,14:$Vg,15:$Vk,28:[1,48],61:$Vh,62:$Vi}),{17:$Vm,28:$Vn,29:49,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:62,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:[1,64],64:63},o($V9,[2,10]),{16:65,17:$Va},{17:[1,66]},o($Vf,[2,64]),{17:$Vm,28:$Vn,29:67,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:68,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},o($Vf,[2,86]),o($Vf,[2,65]),o($Vf,[2,67]),{30:[1,70],53:72,54:69,55:71,65:$V2,66:$V3,67:$V4,68:$V5},{17:[1,74],60:73},o($Vf,[2,66]),o($Vf,[2,68]),{30:[1,76],53:72,54:75,55:71,65:$V2,66:$V3,67:$V4,68:$V5},o($Vf,[2,90],{14:[1,77],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM}),{17:$Vm,28:$Vn,29:94,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:95,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:96,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},o($VN,[2,124]),o($VN,[2,125]),o($VN,[2,126]),o($VN,[2,127]),o($VN,[2,128]),o($VN,[2,129]),o($VN,[2,130]),o($VN,[2,131]),o($VN,[2,132]),o($Vf,[2,92],{14:[1,97],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM}),o($Vb,[2,95]),o($Vb,$Vc),o($Ve,[2,11]),o($Ve,[2,13]),o($Vf,[2,83],{14:[1,98],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM}),o($Vf,[2,85],{14:[1,99],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM}),{15:$VO,30:[1,100]},{31:[1,102]},o($VP,[2,62]),{17:[1,103]},o([5,12,14,17,27,33,36,39,40,45,48,49,52,61,62,65,66,67,68,69,70,71],[2,79],{15:[1,104]}),o($VQ,[2,81]),{15:$VO,30:[1,105]},{31:[1,106]},o($Vf,[2,89]),{17:$Vm,28:$Vn,29:107,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:108,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:109,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:110,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:111,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:112,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:113,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:114,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:115,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:116,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:117,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:118,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:119,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:120,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:121,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:122,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},o($VR,[2,121],{73:$Vy}),o($VR,[2,122],{73:$Vy}),{30:[1,123],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},o($Vf,[2,91]),o($Vf,[2,82]),o($Vf,[2,84]),{31:[1,124]},{53:72,55:125,65:$V2,66:$V3,67:$V4,68:$V5},{9:128,10:129,17:$VS,19:126,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},o($VP,[2,63]),{17:[1,144]},{31:[1,145]},{9:128,10:129,17:$VS,19:146,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},o([5,12,14,17,27,30,33,36,37,39,40,45,48,49,52,65,66,67,68,69,70,71,72,77,78,79,80,81,83,84,85,86,87],[2,105],{73:$Vy,74:$Vz,75:$VA,76:$VB,82:$VH}),o($VR,[2,106],{73:$Vy}),o($VZ,[2,107],{73:$Vy,76:$VB}),o($VZ,[2,108],{73:$Vy,76:$VB}),o($VZ,[2,109],{73:$Vy,76:$VB}),o([5,12,14,17,27,30,33,36,37,39,40,45,48,49,52,65,66,67,68,69,70,71,77],[2,110],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM}),o($V_,[2,111],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,82:$VH}),o($V_,[2,112],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,82:$VH}),o($V_,[2,113],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,82:$VH}),o($V_,[2,114],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,82:$VH}),o($VZ,[2,115],{73:$Vy,76:$VB}),o($V$,[2,116],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH}),o([5,12,14,17,27,30,33,36,37,39,40,45,48,49,52,65,66,67,68,69,70,71,77,84,85],[2,117],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VL,87:$VM}),o([5,12,14,17,27,30,33,36,37,39,40,45,48,49,52,65,66,67,68,69,70,71,77,85],[2,118],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,86:$VL,87:$VM}),o($V$,[2,119],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH}),o($V$,[2,120],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH}),o($VN,[2,123]),{9:128,10:129,17:$VS,19:147,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},o($VP,[2,61]),{9:128,10:129,17:$VS,20:149,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,33:[1,148],40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},o($V01,[2,15]),o($V01,[2,16]),o($V01,[2,17]),o($V01,[2,18]),o($V01,[2,19]),o($V01,[2,20]),o($V01,[2,21]),o($V01,[2,22]),o($V01,[2,23]),{17:[1,150],58:28},o($Vb,$Vc,{58:30,17:[1,151]}),{28:[1,152]},{28:[1,153]},{28:[1,154]},{31:[1,155]},{28:[1,156]},{28:[1,157]},o($VQ,[2,80]),{9:128,10:129,17:$VS,19:158,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{9:128,10:129,17:$VS,20:149,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,33:[1,159],40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{9:128,10:129,17:$VS,20:149,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,33:[1,160],40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},o($V9,[2,59]),o($V01,[2,14]),o($V01,$Vj,{57:43,14:$Vg,15:$Vk,61:$Vh,62:$Vi}),o($V01,$Vl,{57:47,14:$Vg,15:$Vk,61:$Vh,62:$Vi}),{17:$Vm,28:$Vn,29:161,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:162,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:163,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{9:128,10:129,17:$VS,19:164,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{14:[1,167],17:[1,172],41:165,42:166,43:168,44:169,53:171,56:170,63:173,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{17:$Vm,28:$Vn,29:174,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{9:128,10:129,17:$VS,20:149,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,33:[1,175],40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},o($V9,[2,60]),o($V9,[2,57]),{30:[1,176],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},{30:[1,177],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},{30:[1,178],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},{9:128,10:129,17:$VS,20:149,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,33:[1,179],40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{30:[1,180]},{14:[1,181]},{14:[1,183],17:$Vm,28:$Vn,29:182,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{14:[2,42]},{14:[2,43]},{17:[1,184]},{17:[1,186],58:185},o($Vb,$Vc,{58:187,17:[1,188]}),{18:$Vd,61:[1,190],62:[1,189]},{30:[1,191],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},o($V9,[2,58]),o($V01,[2,55],{14:[1,192]}),{31:[1,193]},{31:[1,194]},{48:[1,195]},{31:[1,196]},{14:[1,198],17:$Vm,28:$Vn,29:197,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{14:[1,199],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},{17:$Vm,28:$Vn,29:200,30:[2,41],73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{59:201,61:$V11,62:$V21},{59:204,61:$V11,62:$V21},{15:$Vk,59:205,61:$V11,62:$V21},{59:206,61:$V11,62:$V21},{15:$Vk,59:207,61:$V11,62:$V21},{17:$Vm,28:$Vn,29:208,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:209,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{31:[1,210]},o($V01,[2,56]),{9:128,10:129,17:$VS,19:211,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{9:128,10:129,17:$VS,19:212,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{28:[1,213]},{9:128,10:129,17:$VS,19:214,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{14:[1,215],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},{17:$Vm,28:$Vn,29:216,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:217,30:[2,39],73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{30:[2,40],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},{14:[2,74]},{17:$Vm,28:$Vn,29:218,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:$Vm,28:$Vn,29:219,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{14:[2,75]},{14:[2,77]},{14:[2,76]},{14:[2,78]},{14:[2,93],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},{14:[2,94],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},{32:220,34:221,35:222,36:$V31,38:223,39:$V41},{9:128,10:129,17:$VS,20:149,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,33:[1,226],40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{9:128,10:129,17:$VS,20:149,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,33:[1,227],40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{17:$Vm,28:$Vn,29:228,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{9:128,10:129,17:$VS,20:149,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,33:[1,229],40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{17:$Vm,28:$Vn,29:230,30:[2,37],73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{30:[2,36],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},{30:[2,38],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},{14:[2,87],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},{14:[2,88],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},{33:[1,231]},{33:[2,26],35:232,36:$V31,38:233,39:$V41},{33:[2,27]},o($V51,[2,33]),{37:[1,234]},{17:$Vm,28:$Vn,29:235,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},o($V01,[2,44],{46:236,47:237,51:239,50:$V61}),o($V01,[2,48]),{30:[1,240],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},o($V01,[2,34]),{30:[2,35],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},o($V01,[2,24]),{33:[2,25]},o($V51,[2,32]),{9:128,10:129,17:$VS,19:241,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,33:[2,29],40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{37:[1,242],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},o($V01,[2,45]),o($V01,[2,47],{46:243,51:244,50:$V61}),{31:[1,245],45:[1,246]},o($V71,[2,53]),o($V01,[2,49],{14:[1,247]}),{9:128,10:129,17:$VS,20:149,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,33:[2,28],40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},o($V51,[2,30],{56:10,63:13,64:21,20:127,9:128,10:129,21:130,22:131,23:132,24:133,25:134,26:135,53:136,19:248,17:$VS,27:$VT,40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8}),o($V01,[2,46]),o($V71,[2,52]),{9:128,10:129,17:$VS,19:249,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{28:[1,250]},o($V01,[2,50]),o($V51,[2,31],{56:10,63:13,64:21,9:128,10:129,21:130,22:131,23:132,24:133,25:134,26:135,53:136,20:149,17:$VS,27:$VT,40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8}),{9:128,10:129,17:$VS,20:149,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,33:[1,251],40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{17:$Vm,28:$Vn,29:252,73:$Vo,88:$Vp,89:53,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},o($V01,[2,51]),{30:[1,253],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM},{31:[1,254]},{9:128,10:129,17:$VS,19:255,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{9:128,10:129,17:$VS,20:149,21:130,22:131,23:132,24:133,25:134,26:135,27:$VT,33:[1,256],40:$VU,45:$VV,48:$VW,49:$VX,52:$VY,53:136,56:10,63:13,64:21,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},o($V71,[2,54])],
defaultActions: {14:[2,102],15:[2,103],16:[2,104],17:[2,98],18:[2,99],19:[2,100],20:[2,101],22:[2,1],168:[2,42],169:[2,43],201:[2,74],204:[2,75],205:[2,77],206:[2,76],207:[2,78],222:[2,27],232:[2,25]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments          */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content   */
break;
case 4:/* skip whitespace        */
break;
case 5:return 28;
break;
case 6:return 30;
break;
case 7:return 31;
break;
case 8:return 33;
break;
case 9:return '[';
break;
case 10:return ']';
break;
case 11:return '--';
break;
case 12:return '++';
break;
case 13:return 74;
break;
case 14:return 75;
break;
case 15:return 73;
break;
case 16:return 72;
break;
case 17:return 76;
break;
case 18:return 77;
break;
case 19:return 82;
break;
case 20:return 83;
break;
case 21:return 78;
break;
case 22:return 79;
break;
case 23:return 80;
break;
case 24:return 81;
break;
case 25:return 86;
break;
case 26:return 87;
break;
case 27:return 84;
break;
case 28:return 85;
break;
case 29:return '?';
break;
case 30:return 88;
break;
case 31:return 96;
break;
case 32:return 65;
break;
case 33:return 'double';
break;
case 34:return 66;
break;
case 35:return 12;
break;
case 36:return 69;
break;
case 37:return 70;
break;
case 38:return 71;
break;
case 39:return 94;
break;
case 40:return 95;
break;
case 41:return 45;
break;
case 42:return 50;
break;
case 43:return 27;
break;
case 44:return 39;
break;
case 45:return 36;
break;
case 46:return 'break';
break;
case 47:return 'continue';
break;
case 48:return 'return';
break;
case 49:return 52;
break;
case 50:return 68;
break;
case 51:return 40;
break;
case 52:return 48;
break;
case 53:return 'define';
break;
case 54:return 'as';
break;
case 55:return 'strc';
break;
case 56:return 49;
break;
case 57:return 'try';
break;
case 58:return 'catch';
break;
case 59:return 'throw';
break;
case 60:return 61;
break;
case 61:return 37;
break;
case 62:return 14;
break;
case 63:return 15;
break;
case 64:return 62;
break;
case 65:return 18;
break;
case 66:return 91;
break;
case 67:return 90;
break;
case 68: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 92; 
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 93; 
break;
case 70:return 17;
break;
case 71:return 5;
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:--)/,/^(?:\+\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:%)/,/^(?:<>)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:===)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\?)/,/^(?:!)/,/^(?:null\b)/,/^(?:integer\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:import\b)/,/^(?:var\b)/,/^(?:const\b)/,/^(?:global\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:print\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:define\b)/,/^(?:as\b)/,/^(?:strc\b)/,/^(?:do\b)/,/^(?:try\b)/,/^(?:catch\b)/,/^(?:throw\b)/,/^(?::=)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:=)/,/^(?:\.)/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:"[^\"]*")/,/^(?:'[^\"]?')/,/^(?:[a-zA-ZñÑ_][a-zA-ZñÑ0-9_]*)/,/^(?:$)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = calc;
exports.Parser = calc.Parser;
exports.parse = function () { return calc.parse.apply(calc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}