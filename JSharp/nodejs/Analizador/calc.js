/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,12],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[5,12,17,79,80,81,82,83,84,85],$Va=[1,26],$Vb=[18,40,41],$Vc=[2,126],$Vd=[1,34],$Ve=[5,12,14,15,17,79,80,81,82,83,84,85],$Vf=[5,12,17,42,43,44,46,49,52,55,56,61,64,65,68,79,80,81,82,83,84,85],$Vg=[1,41],$Vh=[1,40],$Vi=[1,39],$Vj=[2,101],$Vk=[1,45],$Vl=[2,102],$Vm=[1,58],$Vn=[1,52],$Vo=[1,51],$Vp=[1,50],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,59],$Vv=[1,60],$Vw=[1,61],$Vx=[1,78],$Vy=[1,79],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[1,86],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[1,93],$VN=[5,12,14,15,17,35,42,43,44,46,49,52,53,55,56,61,64,65,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],$VO=[2,158],$VP=[1,97],$VQ=[1,98],$VR=[1,103],$VS=[15,35],$VT=[5,12,14,15,17,40,41,42,43,44,46,49,52,55,56,61,64,65,68,79,80,81,82,83,84,85],$VU=[5,12,14,15,17,35,42,43,44,46,49,52,53,55,56,61,64,65,68,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101],$VV=[1,144],$VW=[1,151],$VX=[1,152],$VY=[1,153],$VZ=[1,150],$V_=[1,149],$V$=[1,146],$V01=[1,147],$V11=[1,148],$V21=[1,145],$V31=[5,12,14,15,17,35,42,43,44,46,49,52,53,55,56,61,64,65,68,79,80,81,82,83,84,85,86,88,89,91,92,93,94,95,96,97,98,99,100,101],$V41=[5,12,14,15,17,35,42,43,44,46,49,52,53,55,56,61,64,65,68,79,80,81,82,83,84,85,91,92,93,94,95,97,98,99,100,101],$V51=[5,12,14,15,17,35,42,43,44,46,49,52,53,55,56,61,64,65,68,79,80,81,82,83,84,85,91,97,98,99,100,101],$V61=[17,42,43,44,46,49,52,55,56,61,64,65,68,79,80,81,82,83,84,85],$V71=[1,208],$V81=[1,209],$V91=[1,244],$Va1=[1,243],$Vb1=[1,265],$Vc1=[1,266],$Vd1=[49,52,55],$Ve1=[1,279],$Vf1=[17,42,43,44,46,49,52,55,56,61,64,65,66,68,79,80,81,82,83,84,85];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"raiz":4,"EOF":5,"listaCuerpo":6,"sentenciasCuerpo":7,"importar":8,"declaracion_variables":9,"asignacion":10,"declaracionFuncion":11,"import":12,"imports":13,";":14,",":15,"nombremports":16,"id":17,".":18,"bloque":19,"sentenciasBloque":20,"imprmir":21,"sentenciasif":22,"sentenciaWhile":23,"sentenciaDoWhile":24,"sentenciaFor":25,"sentenciaSwitch":26,"sentenciaBreak":27,"sentenciaContinue":28,"sentenciaReturn":29,"llamadaFuncion":30,"aumentoDecremento":31,"++":32,"--":33,"(":34,")":35,"listaExp":36,"listaAsignacion":37,"EXP":38,"asignacionLlamada":39,"=":40,":=":41,"break":42,"continue":43,"return":44,"sentenciaReturnEXP":45,"switch":46,"{":47,"bloqueSwitch":48,"}":49,"listaBloqueSwitch":50,"sentenciaDefault":51,"default":52,":":53,"sentenciaCase":54,"case":55,"for":56,"instruccionesFor":57,"inicioFor":58,"declaracionVariablesFor":59,"asignacionFor":60,"if":61,"sentencaElse":62,"listaElseIf":63,"while":64,"do":65,"else":66,"elseIf":67,"print":68,"tipoDato":69,"patametros":70,"patametro":71,"tipoVCG":72,"inicializador_variable":73,"listaIds":74,"inicializadorVariableFor":75,"listaIds2":76,"listaIdVecFun":77,"tipoId":78,"integer":79,"char":80,"boolean":81,"void":82,"var":83,"const":84,"global":85,"+":86,"-":87,"*":88,"/":89,"^^":90,"^":91,"<":92,">":93,"<=":94,">=":95,"%":96,"<>":97,"&&":98,"||":99,"==":100,"===":101,"!":102,"literal":103,"entero":104,"decimal":105,"cadena":106,"caracter":107,"true":108,"false":109,"null":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"import",14:";",15:",",17:"id",18:".",32:"++",33:"--",34:"(",35:")",40:"=",41:":=",42:"break",43:"continue",44:"return",46:"switch",47:"{",49:"}",52:"default",53:":",55:"case",56:"for",61:"if",64:"while",65:"do",66:"else",68:"print",79:"integer",80:"char",81:"boolean",82:"void",83:"var",84:"const",85:"global",86:"+",87:"-",88:"*",89:"/",90:"^^",91:"^",92:"<",93:">",94:"<=",95:">=",96:"%",97:"<>",98:"&&",99:"||",100:"==",101:"===",102:"!",104:"entero",105:"decimal",106:"cadena",107:"caracter",108:"true",109:"false",110:"null"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,1],[7,1],[8,2],[8,3],[13,3],[13,1],[16,3],[19,2],[19,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[31,2],[31,2],[31,3],[31,3],[30,4],[30,3],[30,5],[30,4],[30,5],[30,4],[36,3],[36,1],[37,3],[37,1],[39,3],[39,3],[27,1],[27,2],[28,1],[28,2],[29,2],[45,1],[45,1],[45,2],[26,7],[48,2],[48,1],[48,1],[51,3],[51,2],[54,3],[54,4],[50,2],[50,1],[25,7],[57,5],[57,4],[57,4],[57,4],[57,3],[57,3],[57,2],[58,1],[58,1],[22,7],[22,8],[22,9],[22,8],[23,7],[24,8],[24,9],[62,4],[63,2],[63,1],[67,8],[21,4],[21,5],[11,8],[11,8],[11,7],[11,7],[70,3],[70,1],[71,2],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,2],[9,2],[9,2],[59,3],[59,3],[59,3],[59,3],[59,3],[74,3],[76,3],[76,1],[73,3],[73,2],[73,3],[73,2],[73,1],[75,2],[75,2],[10,4],[10,3],[10,4],[10,3],[60,3],[60,3],[77,3],[77,1],[78,1],[69,1],[69,1],[69,1],[69,1],[72,1],[72,1],[72,1],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,2],[38,2],[38,3],[38,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,2],[103,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
this.$ = yy.ast.hijos = $$[$0]
break;
case 3: case 14: case 61: case 81:

            $$[$0-1].setHijo($$[$0])
            this.$ = $$[$0-1]
        
break;
case 4:

            this.$ = yy.crearNodo('cuerpo',0,0,[$$[$0]])
        
break;
case 5: case 6: case 7: case 8: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 71: case 72:
this.$ = $$[$0];
break;
case 9:
yy.imprimirToquen($$[$0]); this.$ = yy.crearNodo('import',0,0,[$$[$0]])
break;
case 10:
this.$ = yy.crearNodo('import',0,0,[$$[$0-1]])
break;
case 11: case 39: case 41: case 90:

            $$[$0-2].setHijo($$[$0])
            this.$ = $$[$0-2]
        
break;
case 12:

            this.$ = yy.crearNodo('imports',0,0,[$$[$0]])
        
break;
case 13:

        this.$ = yy.crearNodo('nombre',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)])   
    
break;
case 15:

            this.$ = yy.crearNodo('bloque',0,0,[$$[$0]])
        
break;
case 29: case 162:

            this.$ = yy.crearNodo('incremento',0,0,[yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)])   
        
break;
case 30: case 163:

            this.$ = yy.crearNodo('decremento',0,0,[yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)])   
        
break;
case 31:

            this.$ = yy.crearNodo('incremento',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)])   
        
break;
case 32:

            this.$ = yy.crearNodo('decremento',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)])   
        
break;
case 33:

                this.$ = yy.crearNodo('llamadaFuncion',_$[$0-3].first_line,_$[$0-3].first_column,[yy.crearHoja($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column)])
        
break;
case 34:

                this.$ = yy.crearNodo('llamadaFuncion',_$[$0-2].first_line,_$[$0-2].first_column,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)])
        
break;
case 35: case 37:

                this.$ = yy.crearNodo('llamadaFuncion',_$[$0-4].first_line,_$[$0-4].first_column,[yy.crearHoja($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column),$$[$0-2]])
        
break;
case 36: case 38:

                this.$ = yy.crearNodo('llamadaFuncion',_$[$0-3].first_line,_$[$0-3].first_column,[yy.crearHoja($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column),$$[$0-1]])
        
break;
case 40:

            this.$ = yy.crearNodo('listaExpresiones',0,0,[$$[$0]])
        
break;
case 42:

            this.$ = yy.crearNodo('listaAsignaciones',0,0,[$$[$0]])
        
break;
case 43: case 44:

            this.$ = yy.crearNodo('asignacion',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),$$[$0],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
        
break;
case 45:

            this.$ = yy.crearHoja('break',_$[$0].first_line,_$[$0].first_column)   
        
break;
case 46:

            this.$ = yy.crearHoja('break',_$[$0-1].first_line,_$[$0-1].first_column)   
        
break;
case 47:

            this.$ = yy.crearHoja('continue',_$[$0].first_line,_$[$0].first_column)   
        
break;
case 48:

            this.$ = yy.crearHoja('continue',_$[$0-1].first_line,_$[$0-1].first_column)   
        
break;
case 53:

            this.$ = yy.crearNodo('switch',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-4],$$[$0-1]])
        
break;
case 54:

            this.$ = yy.crearNodo('bloqueSwitch',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-1],$$[$0]])
        
break;
case 55:

                this.$ = yy.crearNodo('bloqueSwitchCases',_$[$0].first_line,_$[$0].first_column,[$$[$0]])
        
break;
case 56:

                this.$ = yy.crearNodo('bloqueSwitchDefault',_$[$0].first_line,_$[$0].first_column,[$$[$0]])
        
break;
case 57:

            this.$ = yy.crearNodo('default',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0]])
        
break;
case 58:

            this.$ = yy.crearNodo('default',_$[$0-1].first_line,_$[$0-1].first_column,[])
        
break;
case 59:

            this.$ = yy.crearNodo('case',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0-1]])
        
break;
case 60:

            this.$ = yy.crearNodo('case',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-2],$$[$0]])
        
break;
case 62:

            this.$ = yy.crearNodo('listaSwitch',0,0,[$$[$0]])
        
break;
case 63:

        this.$ = yy.crearNodo('for',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-4],$$[$0-1]])
    
break;
case 64:

            instruccion1 = yy.crearNodo('instruccion1',_$[$0-4].first_line,_$[$0-4].first_column,[$$[$0-4]]) 
            instruccion2 = yy.crearNodo('instruccion2',_$[$0-4].first_line,_$[$0-4].first_column,[$$[$0-2]])    
            instruccion3 = yy.crearNodo('instruccion3',_$[$0-4].first_line,_$[$0-4].first_column,[$$[$0]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-4].first_line,_$[$0-4].first_column,[instruccion1,instruccion2,instruccion3])
        
break;
case 65:

            instruccion1 = yy.crearNodo('instruccion1',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-3]])    
            instruccion3 = yy.crearNodo('instruccion3',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-3].first_line,_$[$0-3].first_column,[instruccion1,instruccion3])
        
break;
case 66:

            instruccion1 = yy.crearNodo('instruccion1',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-3]])    
            instruccion2 = yy.crearNodo('instruccion2',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-1]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-3].first_line,_$[$0-3].first_column,[instruccion1,instruccion2])
        
break;
case 67:

            instruccion2 = yy.crearNodo('instruccion2',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-2]])    
            instruccion3 = yy.crearNodo('instruccion3',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-3].first_line,_$[$0-3].first_column,[instruccion2,instruccion3])
        
break;
case 68:

            instruccion2 = yy.crearNodo('instruccion2',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0-1]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-2].first_line,_$[$0-2].first_column,[instruccion2])
        
break;
case 69:

            instruccion3 = yy.crearNodo('instruccion3',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-2].first_line,_$[$0-2].first_column,[instruccion3])
        
break;
case 70:
this.$ = yy.crearNodo('instrucciones',_$[$0-1].first_line,_$[$0-1].first_column,[])
break;
case 73:

            bloque = yy.crearNodo('if',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-4],$$[$0-1]])
            nodoIf = yy.crearNodo('ifs',_$[$0-6].first_line,_$[$0-6].first_column,[bloque])      
            this.$ = yy.crearNodo('ifInstruccion',_$[$0-6].first_line,_$[$0-6].first_column,[nodoIf])
        
break;
case 74:

            bloque = yy.crearNodo('if',_$[$0-7].first_line,_$[$0-7].first_column,[$$[$0-5],$$[$0-2]])    
            nodoIf = yy.crearNodo('ifs',_$[$0-7].first_line,_$[$0-7].first_column,[bloque])      
            this.$ = yy.crearNodo('ifInstruccion',_$[$0-7].first_line,_$[$0-7].first_column,[nodoIf,$$[$0]])
        
break;
case 75:

            bloque = yy.crearNodo('if',_$[$0-8].first_line,_$[$0-8].first_column,[$$[$0-6],$$[$0-3]])    
            nodoIf = yy.crearNodo('ifs',_$[$0-8].first_line,_$[$0-8].first_column,[bloque,$$[$0-1]])      
            this.$ = yy.crearNodo('ifInstruccion',_$[$0-8].first_line,_$[$0-8].first_column,[nodoIf,$$[$0]])
        
break;
case 76:

            bloque = yy.crearNodo('if',_$[$0-7].first_line,_$[$0-7].first_column,[$$[$0-5],$$[$0-2]])    
            nodoIf = yy.crearNodo('ifs',_$[$0-7].first_line,_$[$0-7].first_column,[bloque,$$[$0]])      
            this.$ = yy.crearNodo('ifInstruccion',_$[$0-7].first_line,_$[$0-7].first_column,[nodoIf])
        
break;
case 77:

        this.$ = yy.crearNodo('while',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-4],$$[$0-1]])
    
break;
case 78:

            this.$ = yy.crearNodo('do while',_$[$0-7].first_line,_$[$0-7].first_column,[$$[$0-5],$$[$0-1]])
        
break;
case 79:

            this.$ = yy.crearNodo('do while',_$[$0-8].first_line,_$[$0-8].first_column,[$$[$0-6],$$[$0-2]])
        
break;
case 80:

        this.$ = yy.crearNodo('else',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-1]])
    
break;
case 82:

            this.$ = yy.crearNodo('lista else if',0,0,[$$[$0]])
        
break;
case 83:

        this.$ = yy.crearNodo('else if',_$[$0-7].first_line,_$[$0-7].first_column,[$$[$0-4],$$[$0-1]])
    
break;
case 84:
this.$ = yy.crearNodo('print',_$[$0-3].first_line,_$[$0-3].first_column,[yy.crearNodo('EXP',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-1]])])
break;
case 85:
this.$ = yy.crearNodo('print',_$[$0-4].first_line,_$[$0-4].first_column,[yy.crearNodo('EXP',_$[$0-4].first_line,_$[$0-4].first_column,[$$[$0-2]])])
break;
case 86:

		this.$ = yy.crearNodo('declaracionFuncion',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-7],yy.crearHoja($$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column),$$[$0-4],$$[$0-1]])
	
break;
case 87:

		this.$ = yy.crearNodo('declaracionFuncion',_$[$0-6].first_line,_$[$0-6].first_column,[yy.crearHoja($$[$0-7],_$[$0-7].first_line,_$[$0-7].first_column),yy.crearHoja($$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column),$$[$0-4],$$[$0-1]])
	
break;
case 88:

		this.$ = yy.crearNodo('declaracionFuncion',_$[$0-5].first_line,_$[$0-5].first_column,[$$[$0-6],yy.crearHoja($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column),$$[$0-1]])
	
break;
case 89:

		this.$ = yy.crearNodo('declaracionFuncion',_$[$0-5].first_line,_$[$0-5].first_column,[yy.crearHoja($$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column),yy.crearHoja($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column),$$[$0-1]])
	
break;
case 91:

            this.$ = yy.crearNodo('patametros',0,0,[$$[$0]])
        
break;
case 92:
this.$ = yy.crearNodo('parametro',_$[$0].first_line,_$[$0].first_column,[$$[$0-1],yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)])
break;
case 93:

            if($$[$0] == ''){
                this.$ = yy.crearNodo('inicializando variable sin tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
            }
            else{
                this.$ = yy.crearNodo('inicializando variable sin tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
            }
        
break;
case 94:

            if($$[$0] == ''){
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],$$[$0-1]]);
            }
            else{
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],$$[$0-1],$$[$0]]);
            }
        
break;
case 95:

            if($$[$0] == ''){
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),$$[$0-1]]);
            }
            else{
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),$$[$0-1],$$[$0]]);
            }
        
break;
case 96:

            if($$[$0] == ''){
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
            }
            else{
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
            }
        
break;
case 97:

            if($$[$0] == ''){
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
            }
            else{
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
            }
        
break;
case 98:

            this.$ = yy.crearNodo('inicializando variable sin tipo',0,0,[$$[$0-1],yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column),$$[$01]]);
        
break;
case 99:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-1],$$[$0]]);
        
break;
case 100:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
        
break;
case 101:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-1],yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)]);
        
break;
case 102:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)]);
        
break;
case 103:

            this.$ = yy.crearNodo('inicializando variable sin tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
        
break;
case 104:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],$$[$0-1],$$[$0]]);
        
break;
case 105:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),$$[$0-1],$$[$0]]);
        
break;
case 106:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
        
break;
case 107:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
        
break;
case 108:
 
            $$[$0].setHijo(yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column))
            this.$ = $$[$0]
        
break;
case 109:

            $$[$0-2].setHijo(yy.crearHoja($$[$0],0,0))
            this.$ = $$[$0-2]
        
break;
case 110:
            
            this.$ = yy.crearNodo('listaIds',0,0,[yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)])
        
break;
case 111:
this.$ = yy.crearNodo('EXP',0,0,[$$[$0-1],yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)]);
break;
case 112: case 114:
this.$ = yy.crearNodo('EXP',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
break;
case 113:
this.$ = yy.crearNodo('EXP',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0-1],yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)]);
break;
case 115:
this.$ = ''
break;
case 116: case 117:
this.$ = yy.crearNodo('EXP',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0]]);
break;
case 118: case 120:

            this.$ = yy.crearNodo('asignacion',0,0,[$$[$0-3],$$[$0-1],yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)]);
        
break;
case 119: case 121:

            this.$ = yy.crearNodo('asignacion',0,0,[$$[$0-2],$$[$0],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
        
break;
case 122: case 123:

            this.$ = yy.crearNodo('asignacion',0,0,[[$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column],$$[$0]]);
        
break;
case 124:
            
            $$[$0-2].setHijo(yy.crearHoja($$[$0],0,0))
        
break;
case 125:

            this.$ = yy.crearNodo('identificadorAsignacion',0,0,[$$[$0]])
        
break;
case 126:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('identificador',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 127:
this.$ = yy.crearHoja('integer',_$[$0].first_line,_$[$0].first_column)
break;
case 128:
this.$ = yy.crearHoja('char',_$[$0].first_line,_$[$0].first_column)
break;
case 129:
this.$ = yy.crearHoja('boolean',_$[$0].first_line,_$[$0].first_column)
break;
case 130:
this.$ = yy.crearHoja('void',_$[$0].first_line,_$[$0].first_column)
break;
case 131:
this.$ = yy.crearHoja('var',_$[$0].first_line,_$[$0].first_column)
break;
case 132:
this.$ = yy.crearHoja('const',_$[$0].first_line,_$[$0].first_column)
break;
case 133:
this.$ = yy.crearHoja('global',_$[$0].first_line,_$[$0].first_column)
break;
case 134:
this.$ = yy.crearNodo('+',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 135:
this.$ = yy.crearNodo('-',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 136:
this.$ = yy.crearNodo('*',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 137:
this.$ = yy.crearNodo('/',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 138:
this.$ = yy.crearNodo('^^',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 139:
this.$ = yy.crearNodo('^',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 140:
this.$ = yy.crearNodo('<',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 141:
this.$ = yy.crearNodo('>',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 142:
this.$ = yy.crearNodo('<=',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 143:
this.$ = yy.crearNodo('>=',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 144:
this.$ = yy.crearNodo('%',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 145:
this.$ = yy.crearNodo('<>',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 146:
this.$ = yy.crearNodo('&&',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 147:
this.$ = yy.crearNodo('||',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 148:
this.$ = yy.crearNodo('==',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 149:
this.$ = yy.crearNodo('===',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 150:
this.$ = yy.crearNodo('!',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0]])
break;
case 151:
this.$ = yy.crearNodo('-',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0]])
break;
case 152:
this.$ = $$[$0-1];
break;
case 153:
this.$ = yy.crearNodo('literal',0,0,[$$[$0]])
break;
case 154:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('entero',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 155:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('decimal',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 156:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('cadena',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 157:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('caracter',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 158:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('identificacdor',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 159: case 160:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('boleano',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 161:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('nulo',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,17:$V1,69:11,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},{1:[3]},{5:[1,22]},{5:[2,2],7:23,8:5,9:6,10:7,11:8,12:$V0,17:$V1,69:11,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),{13:24,16:25,17:$Va},{17:[1,27]},{17:[1,29],74:28},o($Vb,$Vc,{74:30,17:[1,31]}),{18:$Vd,40:[1,32],41:[1,33]},{17:[2,131]},{17:[2,132]},{17:[2,133]},{17:[2,127]},{17:[2,128]},{17:[2,129]},{17:[2,130]},o($Vb,[2,125]),{1:[2,1]},o($V9,[2,3]),o($V9,[2,9],{14:[1,35],15:[1,36]}),o($Ve,[2,12]),{18:[1,37]},o($Vf,[2,98],{73:38,14:$Vg,40:$Vh,41:$Vi}),o($Vf,[2,99],{73:42,14:$Vg,40:$Vh,41:$Vi}),o($V9,$Vj,{73:43,14:$Vg,15:$Vk,34:[1,44],40:$Vh,41:$Vi}),o($Vf,[2,100],{73:46,14:$Vg,40:$Vh,41:$Vi}),o($V9,$Vl,{73:47,14:$Vg,15:$Vk,34:[1,48],40:$Vh,41:$Vi}),{17:$Vm,34:$Vn,38:49,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:62,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:[1,64],78:63},o($V9,[2,10]),{16:65,17:$Va},{17:[1,66]},o($Vf,[2,93]),{17:$Vm,34:$Vn,38:67,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:68,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},o($Vf,[2,115]),o($Vf,[2,94]),o($Vf,[2,96]),{35:[1,70],69:72,70:69,71:71,79:$V2,80:$V3,81:$V4,82:$V5},{17:[1,74],76:73},o($Vf,[2,95]),o($Vf,[2,97]),{35:[1,76],69:72,70:75,71:71,79:$V2,80:$V3,81:$V4,82:$V5},o($Vf,[2,119],{14:[1,77],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM}),{17:$Vm,34:$Vn,38:94,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:95,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:96,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},o($VN,[2,153]),o($VN,[2,154]),o($VN,[2,155]),o($VN,[2,156]),o($VN,[2,157]),o($VN,$VO,{32:$VP,33:$VQ}),o($VN,[2,159]),o($VN,[2,160]),o($VN,[2,161]),o($Vf,[2,121],{14:[1,99],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM}),o($Vb,[2,124]),o($Vb,$Vc),o($Ve,[2,11]),o($Ve,[2,13]),o($Vf,[2,112],{14:[1,100],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM}),o($Vf,[2,114],{14:[1,101],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM}),{15:$VR,35:[1,102]},{47:[1,104]},o($VS,[2,91]),{17:[1,105]},o([5,12,14,17,40,41,42,43,44,46,49,52,55,56,61,64,65,68,79,80,81,82,83,84,85],[2,108],{15:[1,106]}),o($VT,[2,110]),{15:$VR,35:[1,107]},{47:[1,108]},o($Vf,[2,118]),{17:$Vm,34:$Vn,38:109,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:110,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:111,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:112,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:113,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:114,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:115,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:116,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:117,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:118,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:119,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:120,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:121,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:122,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:123,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:124,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},o($VU,[2,150],{87:$Vy}),o($VU,[2,151],{87:$Vy}),{35:[1,125],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},o($VN,[2,162]),o($VN,[2,163]),o($Vf,[2,120]),o($Vf,[2,111]),o($Vf,[2,113]),{47:[1,126]},{69:72,71:127,79:$V2,80:$V3,81:$V4,82:$V5},{9:130,10:131,17:$VV,19:128,20:129,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},o($VS,[2,92]),{17:[1,154]},{47:[1,155]},{9:130,10:131,17:$VV,19:156,20:129,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},o([5,12,14,15,17,35,42,43,44,46,49,52,53,55,56,61,64,65,68,79,80,81,82,83,84,85,86,91,92,93,94,95,97,98,99,100,101],[2,134],{87:$Vy,88:$Vz,89:$VA,90:$VB,96:$VH}),o($VU,[2,135],{87:$Vy}),o($V31,[2,136],{87:$Vy,90:$VB}),o($V31,[2,137],{87:$Vy,90:$VB}),o($V31,[2,138],{87:$Vy,90:$VB}),o([5,12,14,15,17,35,42,43,44,46,49,52,53,55,56,61,64,65,68,79,80,81,82,83,84,85,91],[2,139],{86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM}),o($V41,[2,140],{86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,96:$VH}),o($V41,[2,141],{86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,96:$VH}),o($V41,[2,142],{86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,96:$VH}),o($V41,[2,143],{86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,96:$VH}),o($V31,[2,144],{87:$Vy,90:$VB}),o($V51,[2,145],{86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH}),o([5,12,14,15,17,35,42,43,44,46,49,52,53,55,56,61,64,65,68,79,80,81,82,83,84,85,91,98,99],[2,146],{86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,100:$VL,101:$VM}),o([5,12,14,15,17,35,42,43,44,46,49,52,53,55,56,61,64,65,68,79,80,81,82,83,84,85,91,99],[2,147],{86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,100:$VL,101:$VM}),o($V51,[2,148],{86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH}),o($V51,[2,149],{86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH}),o($VN,[2,152]),{9:130,10:131,17:$VV,19:157,20:129,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},o($VS,[2,90]),{9:130,10:131,17:$VV,20:159,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,49:[1,158],56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},o($V61,[2,15]),o($V61,[2,16]),o($V61,[2,17]),o($V61,[2,18]),o($V61,[2,19]),o($V61,[2,20]),o($V61,[2,21]),o($V61,[2,22]),o($V61,[2,23]),o($V61,[2,24]),o($V61,[2,25]),o($V61,[2,26]),o($V61,[2,27]),o($V61,[2,28]),{17:[1,160],74:28},o($Vb,$Vc,{74:30,17:[1,161],32:[1,163],33:[1,164],34:[1,162]}),{34:[1,165]},{34:[1,166]},{34:[1,167]},{47:[1,168]},{34:[1,169]},{34:[1,170]},o($V61,[2,45],{14:[1,171]}),o($V61,[2,47],{14:[1,172]}),{14:[1,174],17:$Vm,34:$Vn,38:175,45:173,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},o($VT,[2,109]),{9:130,10:131,17:$VV,19:176,20:129,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},{9:130,10:131,17:$VV,20:159,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,49:[1,177],56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},{9:130,10:131,17:$VV,20:159,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,49:[1,178],56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},o($V9,[2,88]),o($V61,[2,14]),o($V61,$Vj,{73:43,14:$Vg,15:$Vk,40:$Vh,41:$Vi}),o($V61,$Vl,{73:47,14:$Vg,15:$Vk,40:$Vh,41:$Vi}),{17:[1,184],34:$Vn,35:[1,179],36:180,37:181,38:182,39:183,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},o($V61,[2,29],{14:[1,185]}),o($V61,[2,30],{14:[1,186]}),{17:$Vm,34:$Vn,38:187,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:188,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:189,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{9:130,10:131,17:$VV,19:190,20:129,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},{14:[1,193],17:[1,198],57:191,58:192,59:194,60:195,69:197,72:196,77:199,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},{17:$Vm,34:$Vn,38:200,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},o($V61,[2,46]),o($V61,[2,48]),o($V61,[2,49]),o($V61,[2,50]),o($V61,[2,51],{14:[1,201],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM}),{9:130,10:131,17:$VV,20:159,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,49:[1,202],56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},o($V9,[2,89]),o($V9,[2,86]),o($V61,[2,34],{14:[1,203]}),{15:[1,205],35:[1,204]},{15:[1,207],35:[1,206]},o($VS,[2,40],{86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM}),o($VS,[2,42]),o([15,35,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],$VO,{32:$VP,33:$VQ,40:$V71,41:$V81}),o($V61,[2,31]),o($V61,[2,32]),{35:[1,210],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},{35:[1,211],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},{35:[1,212],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},{9:130,10:131,17:$VV,20:159,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,49:[1,213],56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},{35:[1,214]},{14:[1,215]},{14:[1,217],17:$Vm,34:$Vn,38:216,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{14:[2,71]},{14:[2,72]},{17:[1,218]},{17:[1,220],74:219},o($Vb,$Vc,{74:221,17:[1,222]}),{18:$Vd,40:[1,223],41:[1,224]},{35:[1,225],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},o($V61,[2,52]),o($V9,[2,87]),o($V61,[2,33]),o($V61,[2,36],{14:[1,226]}),{17:$Vm,34:$Vn,38:227,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},o($V61,[2,38],{14:[1,228]}),{17:[1,230],39:229},{17:$Vm,34:$Vn,38:231,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:232,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},o($V61,[2,84],{14:[1,233]}),{47:[1,234]},{47:[1,235]},{64:[1,236]},{47:[1,237]},{14:[1,239],17:$Vm,34:$Vn,38:238,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{14:[1,240],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},{17:$Vm,34:$Vn,35:[2,70],38:241,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{40:$V91,41:$Va1,75:242},{40:$V91,41:$Va1,75:245},{15:$Vk,40:$V91,41:$Va1,75:246},{40:$V91,41:$Va1,75:247},{15:$Vk,40:$V91,41:$Va1,75:248},{17:$Vm,34:$Vn,38:249,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:250,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{47:[1,251]},o($V61,[2,35]),o($VS,[2,39],{86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM}),o($V61,[2,37]),o($VS,[2,41]),{40:$V71,41:$V81},o($VS,[2,43],{86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM}),o($VS,[2,44],{86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM}),o($V61,[2,85]),{9:130,10:131,17:$VV,19:252,20:129,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},{9:130,10:131,17:$VV,19:253,20:129,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},{34:[1,254]},{9:130,10:131,17:$VV,19:255,20:129,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},{14:[1,256],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},{17:$Vm,34:$Vn,38:257,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,35:[2,68],38:258,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{35:[2,69],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},{14:[2,103]},{17:$Vm,34:$Vn,38:259,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{17:$Vm,34:$Vn,38:260,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{14:[2,104]},{14:[2,106]},{14:[2,105]},{14:[2,107]},{14:[2,122],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},{14:[2,123],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},{48:261,50:262,51:263,52:$Vb1,54:264,55:$Vc1},{9:130,10:131,17:$VV,20:159,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,49:[1,267],56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},{9:130,10:131,17:$VV,20:159,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,49:[1,268],56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},{17:$Vm,34:$Vn,38:269,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{9:130,10:131,17:$VV,20:159,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,49:[1,270],56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},{17:$Vm,34:$Vn,35:[2,66],38:271,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},{35:[2,65],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},{35:[2,67],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},{14:[2,116],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},{14:[2,117],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},{49:[1,272]},{49:[2,55],51:273,52:$Vb1,54:274,55:$Vc1},{49:[2,56]},o($Vd1,[2,62]),{53:[1,275]},{17:$Vm,34:$Vn,38:276,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},o($V61,[2,73],{62:277,63:278,67:280,66:$Ve1}),o($V61,[2,77]),{35:[1,281],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},o($V61,[2,63]),{35:[2,64],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},o($V61,[2,53]),{49:[2,54]},o($Vd1,[2,61]),{9:130,10:131,17:$VV,19:282,20:129,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,49:[2,58],56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},{53:[1,283],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},o($V61,[2,74]),o($V61,[2,76],{62:284,67:285,66:$Ve1}),{47:[1,286],61:[1,287]},o($Vf1,[2,82]),o($V61,[2,78],{14:[1,288]}),{9:130,10:131,17:$VV,20:159,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,49:[2,57],56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},o($Vd1,[2,59],{72:10,77:13,78:21,20:129,9:130,10:131,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,69:143,19:289,17:$VV,42:$VW,43:$VX,44:$VY,46:$VZ,56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8}),o($V61,[2,75]),o($Vf1,[2,81]),{9:130,10:131,17:$VV,19:290,20:129,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},{34:[1,291]},o($V61,[2,79]),o($Vd1,[2,60],{72:10,77:13,78:21,9:130,10:131,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,69:143,20:159,17:$VV,42:$VW,43:$VX,44:$VY,46:$VZ,56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8}),{9:130,10:131,17:$VV,20:159,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,49:[1,292],56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},{17:$Vm,34:$Vn,38:293,87:$Vo,102:$Vp,103:53,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw},o($V61,[2,80]),{35:[1,294],86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ,99:$VK,100:$VL,101:$VM},{47:[1,295]},{9:130,10:131,17:$VV,19:296,20:129,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},{9:130,10:131,17:$VV,20:159,21:132,22:133,23:134,24:135,25:136,26:137,27:138,28:139,29:140,30:141,31:142,42:$VW,43:$VX,44:$VY,46:$VZ,49:[1,297],56:$V_,61:$V$,64:$V01,65:$V11,68:$V21,69:143,72:10,77:13,78:21,79:$V2,80:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8},o($Vf1,[2,83])],
defaultActions: {14:[2,131],15:[2,132],16:[2,133],17:[2,127],18:[2,128],19:[2,129],20:[2,130],22:[2,1],194:[2,71],195:[2,72],242:[2,103],245:[2,104],246:[2,106],247:[2,105],248:[2,107],263:[2,56],273:[2,54]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments          */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content   */
break;
case 4:/* skip whitespace        */
break;
case 5:return 34;
break;
case 6:return 35;
break;
case 7:return 47;
break;
case 8:return 49;
break;
case 9:return '[';
break;
case 10:return ']';
break;
case 11:return 33;
break;
case 12:return 32;
break;
case 13:return 88;
break;
case 14:return 89;
break;
case 15:return 87;
break;
case 16:return 86;
break;
case 17:return 90;
break;
case 18:return 91;
break;
case 19:return 96;
break;
case 20:return 97;
break;
case 21:return 92;
break;
case 22:return 93;
break;
case 23:return 94;
break;
case 24:return 95;
break;
case 25:return 100;
break;
case 26:return 101;
break;
case 27:return 98;
break;
case 28:return 99;
break;
case 29:return '?';
break;
case 30:return 102;
break;
case 31:return 110;
break;
case 32:return 79;
break;
case 33:return 'double';
break;
case 34:return 80;
break;
case 35:return 12;
break;
case 36:return 83;
break;
case 37:return 84;
break;
case 38:return 85;
break;
case 39:return 108;
break;
case 40:return 109;
break;
case 41:return 61;
break;
case 42:return 66;
break;
case 43:return 46;
break;
case 44:return 55;
break;
case 45:return 52;
break;
case 46:return 42;
break;
case 47:return 43;
break;
case 48:return 44;
break;
case 49:return 68;
break;
case 50:return 82;
break;
case 51:return 56;
break;
case 52:return 64;
break;
case 53:return 'define';
break;
case 54:return 'as';
break;
case 55:return 'strc';
break;
case 56:return 65;
break;
case 57:return 'try';
break;
case 58:return 'catch';
break;
case 59:return 'throw';
break;
case 60:return 41;
break;
case 61:return 53;
break;
case 62:return 14;
break;
case 63:return 15;
break;
case 64:return 40;
break;
case 65:return 18;
break;
case 66:return 105;
break;
case 67:return 104;
break;
case 68: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 106; 
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 107; 
break;
case 70:return 17;
break;
case 71:return 5;
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:--)/,/^(?:\+\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:%)/,/^(?:<>)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:===)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\?)/,/^(?:!)/,/^(?:null\b)/,/^(?:integer\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:import\b)/,/^(?:var\b)/,/^(?:const\b)/,/^(?:global\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:print\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:define\b)/,/^(?:as\b)/,/^(?:strc\b)/,/^(?:do\b)/,/^(?:try\b)/,/^(?:catch\b)/,/^(?:throw\b)/,/^(?::=)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:=)/,/^(?:\.)/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:"[^\"]*")/,/^(?:'[^\"]?')/,/^(?:[a-zA-ZñÑ_][a-zA-ZñÑ0-9_]*)/,/^(?:$)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = calc;
exports.Parser = calc.Parser;
exports.parse = function () { return calc.parse.apply(calc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}