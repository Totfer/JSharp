/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,12],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[5,12,17,80,81,82,83,84,85,86],$Va=[1,26],$Vb=[18,41,42],$Vc=[2,129],$Vd=[1,34],$Ve=[5,12,14,15,17,80,81,82,83,84,85,86],$Vf=[5,12,17,43,44,45,47,50,53,56,57,62,65,66,69,80,81,82,83,84,85,86],$Vg=[1,41],$Vh=[1,40],$Vi=[1,39],$Vj=[2,104],$Vk=[1,45],$Vl=[2,105],$Vm=[1,58],$Vn=[1,52],$Vo=[1,51],$Vp=[1,50],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,59],$Vv=[1,60],$Vw=[1,61],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[1,83],$VC=[1,84],$VD=[1,85],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[1,92],$VL=[1,93],$VM=[1,94],$VN=[5,12,14,15,17,35,43,44,45,47,50,53,54,56,57,62,65,66,69,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],$VO=[2,161],$VP=[1,98],$VQ=[1,99],$VR=[1,100],$VS=[1,105],$VT=[15,35],$VU=[5,12,14,15,17,41,42,43,44,45,47,50,53,56,57,62,65,66,69,80,81,82,83,84,85,86],$VV=[5,12,14,15,17,35,43,44,45,47,50,53,54,56,57,62,65,66,69,80,81,82,83,84,85,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102],$VW=[1,133],$VX=[1,152],$VY=[1,159],$VZ=[1,160],$V_=[1,161],$V$=[1,158],$V01=[1,157],$V11=[1,154],$V21=[1,155],$V31=[1,156],$V41=[1,153],$V51=[5,12,14,15,17,35,43,44,45,47,50,53,54,56,57,62,65,66,69,80,81,82,83,84,85,86,87,89,90,92,93,94,95,96,97,98,99,100,101,102],$V61=[5,12,14,15,17,35,43,44,45,47,50,53,54,56,57,62,65,66,69,80,81,82,83,84,85,86,92,93,94,95,96,98,99,100,101,102],$V71=[5,12,14,15,17,35,43,44,45,47,50,53,54,56,57,62,65,66,69,80,81,82,83,84,85,86,92,98,99,100,101,102],$V81=[1,166],$V91=[1,168],$Va1=[1,169],$Vb1=[1,170],$Vc1=[17,43,44,45,47,50,53,56,57,62,65,66,69,80,81,82,83,84,85,86],$Vd1=[1,251],$Ve1=[1,250],$Vf1=[1,272],$Vg1=[1,273],$Vh1=[50,53,56],$Vi1=[1,286],$Vj1=[17,43,44,45,47,50,53,56,57,62,65,66,67,69,80,81,82,83,84,85,86];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"raiz":4,"EOF":5,"listaCuerpo":6,"sentenciasCuerpo":7,"importar":8,"declaracion_variables":9,"asignacion":10,"declaracionFuncion":11,"import":12,"imports":13,";":14,",":15,"nombremports":16,"id":17,".":18,"bloque":19,"sentenciasBloque":20,"imprmir":21,"sentenciasif":22,"sentenciaWhile":23,"sentenciaDoWhile":24,"sentenciaFor":25,"sentenciaSwitch":26,"sentenciaBreak":27,"sentenciaContinue":28,"sentenciaReturn":29,"llamadaFuncion":30,"aumentoDecremento":31,"++":32,"--":33,"(":34,")":35,"listaExp":36,"listaAsignacion":37,"llamadaFuncion2":38,"EXP":39,"asignacionLlamada":40,"=":41,":=":42,"break":43,"continue":44,"return":45,"sentenciaReturnEXP":46,"switch":47,"{":48,"bloqueSwitch":49,"}":50,"listaBloqueSwitch":51,"sentenciaDefault":52,"default":53,":":54,"sentenciaCase":55,"case":56,"for":57,"instruccionesFor":58,"inicioFor":59,"declaracionVariablesFor":60,"asignacionFor":61,"if":62,"sentencaElse":63,"listaElseIf":64,"while":65,"do":66,"else":67,"elseIf":68,"print":69,"tipoDato":70,"patametros":71,"patametro":72,"tipoVCG":73,"inicializador_variable":74,"listaIds":75,"inicializadorVariableFor":76,"listaIds2":77,"listaIdVecFun":78,"tipoId":79,"integer":80,"char":81,"boolean":82,"void":83,"var":84,"const":85,"global":86,"+":87,"-":88,"*":89,"/":90,"^^":91,"^":92,"<":93,">":94,"<=":95,">=":96,"%":97,"<>":98,"&&":99,"||":100,"==":101,"===":102,"!":103,"literal":104,"entero":105,"decimal":106,"cadena":107,"caracter":108,"true":109,"false":110,"null":111,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"import",14:";",15:",",17:"id",18:".",32:"++",33:"--",34:"(",35:")",41:"=",42:":=",43:"break",44:"continue",45:"return",47:"switch",48:"{",50:"}",53:"default",54:":",56:"case",57:"for",62:"if",65:"while",66:"do",67:"else",69:"print",80:"integer",81:"char",82:"boolean",83:"void",84:"var",85:"const",86:"global",87:"+",88:"-",89:"*",90:"/",91:"^^",92:"^",93:"<",94:">",95:"<=",96:">=",97:"%",98:"<>",99:"&&",100:"||",101:"==",102:"===",103:"!",105:"entero",106:"decimal",107:"cadena",108:"caracter",109:"true",110:"false",111:"null"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,1],[7,1],[8,2],[8,3],[13,3],[13,1],[16,3],[19,2],[19,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[31,2],[31,2],[31,3],[31,3],[30,4],[30,3],[30,5],[30,4],[30,5],[30,4],[38,3],[38,4],[38,4],[36,3],[36,1],[37,3],[37,1],[40,3],[40,3],[27,1],[27,2],[28,1],[28,2],[29,2],[46,1],[46,1],[46,2],[26,7],[49,2],[49,1],[49,1],[52,3],[52,2],[55,3],[55,4],[51,2],[51,1],[25,7],[58,5],[58,4],[58,4],[58,4],[58,3],[58,3],[58,2],[59,1],[59,1],[22,7],[22,8],[22,9],[22,8],[23,7],[24,8],[24,9],[63,4],[64,2],[64,1],[68,8],[21,4],[21,5],[11,8],[11,8],[11,7],[11,7],[71,3],[71,1],[72,2],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,2],[9,2],[9,2],[60,3],[60,3],[60,3],[60,3],[60,3],[75,3],[77,3],[77,1],[74,3],[74,2],[74,3],[74,2],[74,1],[76,2],[76,2],[10,4],[10,3],[10,4],[10,3],[61,3],[61,3],[78,3],[78,1],[79,1],[70,1],[70,1],[70,1],[70,1],[73,1],[73,1],[73,1],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,2],[39,2],[39,3],[39,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,2],[104,2],[104,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
this.$ = yy.ast.hijos = $$[$0]
break;
case 3: case 14: case 64: case 84:

            $$[$0-1].setHijo($$[$0])
            this.$ = $$[$0-1]
        
break;
case 4:

            this.$ = yy.crearNodo('cuerpo',0,0,[$$[$0]])
        
break;
case 5: case 6: case 7: case 8: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 74: case 75:
this.$ = $$[$0];
break;
case 9:
yy.imprimirToquen($$[$0]); this.$ = yy.crearNodo('import',0,0,[$$[$0]])
break;
case 10:
this.$ = yy.crearNodo('import',0,0,[$$[$0-1]])
break;
case 11: case 42: case 44: case 93:

            $$[$0-2].setHijo($$[$0])
            this.$ = $$[$0-2]
        
break;
case 12:

            this.$ = yy.crearNodo('imports',0,0,[$$[$0]])
        
break;
case 13:

        this.$ = yy.crearNodo('nombre',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)])   
    
break;
case 15:

            this.$ = yy.crearNodo('bloque',0,0,[$$[$0]])
        
break;
case 29: case 165:

            this.$ = yy.crearNodo('incremento',0,0,[yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)])   
        
break;
case 30: case 166:

            this.$ = yy.crearNodo('decremento',0,0,[yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)])   
        
break;
case 31:

            this.$ = yy.crearNodo('incremento',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)])   
        
break;
case 32:

            this.$ = yy.crearNodo('decremento',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)])   
        
break;
case 33:

                this.$ = yy.crearNodo('llamadaFuncion',_$[$0-3].first_line,_$[$0-3].first_column,[yy.crearHoja($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column)])
        
break;
case 34: case 39:

                this.$ = yy.crearNodo('llamadaFuncion',_$[$0-2].first_line,_$[$0-2].first_column,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)])
        
break;
case 35: case 37:

                this.$ = yy.crearNodo('llamadaFuncion',_$[$0-4].first_line,_$[$0-4].first_column,[yy.crearHoja($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column),$$[$0-2]])
        
break;
case 36: case 38: case 40: case 41:

                this.$ = yy.crearNodo('llamadaFuncion',_$[$0-3].first_line,_$[$0-3].first_column,[yy.crearHoja($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column),$$[$0-1]])
        
break;
case 43:

            this.$ = yy.crearNodo('listaExpresiones',0,0,[$$[$0]])
        
break;
case 45:

            this.$ = yy.crearNodo('listaAsignaciones',0,0,[$$[$0]])
        
break;
case 46: case 47:

            this.$ = yy.crearNodo('asignacion',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),$$[$0],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
        
break;
case 48:

            this.$ = yy.crearHoja('break',_$[$0].first_line,_$[$0].first_column)   
        
break;
case 49:

            this.$ = yy.crearHoja('break',_$[$0-1].first_line,_$[$0-1].first_column)   
        
break;
case 50:

            this.$ = yy.crearHoja('continue',_$[$0].first_line,_$[$0].first_column)   
        
break;
case 51:

            this.$ = yy.crearHoja('continue',_$[$0-1].first_line,_$[$0-1].first_column)   
        
break;
case 52:

        if($$[$0] == ''){
            this.$ = yy.crearNodo('return',_$[$0-1].first_line,_$[$0-1].first_column,[]);
        }
        else{
            this.$ = yy.crearNodo('return',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0]]);
        }   
    
break;
case 53:

        this.$ = ''
    
break;
case 54:

        this.$ = $$[$0]
    
break;
case 55:

        this.$ = $$[$0-1]
    
break;
case 56:

            this.$ = yy.crearNodo('switch',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-4],$$[$0-1]])
        
break;
case 57:

            this.$ = yy.crearNodo('bloqueSwitch',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-1],$$[$0]])
        
break;
case 58:

                this.$ = yy.crearNodo('bloqueSwitchCases',_$[$0].first_line,_$[$0].first_column,[$$[$0]])
        
break;
case 59:

                this.$ = yy.crearNodo('bloqueSwitchDefault',_$[$0].first_line,_$[$0].first_column,[$$[$0]])
        
break;
case 60:

            this.$ = yy.crearNodo('default',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0]])
        
break;
case 61:

            this.$ = yy.crearNodo('default',_$[$0-1].first_line,_$[$0-1].first_column,[])
        
break;
case 62:

            this.$ = yy.crearNodo('case',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0-1]])
        
break;
case 63:

            this.$ = yy.crearNodo('case',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-2],$$[$0]])
        
break;
case 65:

            this.$ = yy.crearNodo('listaSwitch',0,0,[$$[$0]])
        
break;
case 66:

        this.$ = yy.crearNodo('for',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-4],$$[$0-1]])
    
break;
case 67:

            instruccion1 = yy.crearNodo('instruccion1',_$[$0-4].first_line,_$[$0-4].first_column,[$$[$0-4]]) 
            instruccion2 = yy.crearNodo('instruccion2',_$[$0-4].first_line,_$[$0-4].first_column,[$$[$0-2]])    
            instruccion3 = yy.crearNodo('instruccion3',_$[$0-4].first_line,_$[$0-4].first_column,[$$[$0]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-4].first_line,_$[$0-4].first_column,[instruccion1,instruccion2,instruccion3])
        
break;
case 68:

            instruccion1 = yy.crearNodo('instruccion1',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-3]])    
            instruccion3 = yy.crearNodo('instruccion3',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-3].first_line,_$[$0-3].first_column,[instruccion1,instruccion3])
        
break;
case 69:

            instruccion1 = yy.crearNodo('instruccion1',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-3]])    
            instruccion2 = yy.crearNodo('instruccion2',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-1]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-3].first_line,_$[$0-3].first_column,[instruccion1,instruccion2])
        
break;
case 70:

            instruccion2 = yy.crearNodo('instruccion2',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-2]])    
            instruccion3 = yy.crearNodo('instruccion3',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-3].first_line,_$[$0-3].first_column,[instruccion2,instruccion3])
        
break;
case 71:

            instruccion2 = yy.crearNodo('instruccion2',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0-1]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-2].first_line,_$[$0-2].first_column,[instruccion2])
        
break;
case 72:

            instruccion3 = yy.crearNodo('instruccion3',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-2].first_line,_$[$0-2].first_column,[instruccion3])
        
break;
case 73:
this.$ = yy.crearNodo('instrucciones',_$[$0-1].first_line,_$[$0-1].first_column,[])
break;
case 76:

            bloque = yy.crearNodo('if',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-4],$$[$0-1]])
            nodoIf = yy.crearNodo('ifs',_$[$0-6].first_line,_$[$0-6].first_column,[bloque])      
            this.$ = yy.crearNodo('ifInstruccion',_$[$0-6].first_line,_$[$0-6].first_column,[nodoIf])
        
break;
case 77:

            bloque = yy.crearNodo('if',_$[$0-7].first_line,_$[$0-7].first_column,[$$[$0-5],$$[$0-2]])    
            nodoIf = yy.crearNodo('ifs',_$[$0-7].first_line,_$[$0-7].first_column,[bloque])      
            this.$ = yy.crearNodo('ifInstruccion',_$[$0-7].first_line,_$[$0-7].first_column,[nodoIf,$$[$0]])
        
break;
case 78:

            bloque = yy.crearNodo('if',_$[$0-8].first_line,_$[$0-8].first_column,[$$[$0-6],$$[$0-3]])    
            nodoIf = yy.crearNodo('ifs',_$[$0-8].first_line,_$[$0-8].first_column,[bloque,$$[$0-1]])      
            this.$ = yy.crearNodo('ifInstruccion',_$[$0-8].first_line,_$[$0-8].first_column,[nodoIf,$$[$0]])
        
break;
case 79:

            bloque = yy.crearNodo('if',_$[$0-7].first_line,_$[$0-7].first_column,[$$[$0-5],$$[$0-2]])    
            nodoIf = yy.crearNodo('ifs',_$[$0-7].first_line,_$[$0-7].first_column,[bloque,$$[$0]])      
            this.$ = yy.crearNodo('ifInstruccion',_$[$0-7].first_line,_$[$0-7].first_column,[nodoIf])
        
break;
case 80:

        this.$ = yy.crearNodo('while',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-4],$$[$0-1]])
    
break;
case 81:

            this.$ = yy.crearNodo('do while',_$[$0-7].first_line,_$[$0-7].first_column,[$$[$0-5],$$[$0-1]])
        
break;
case 82:

            this.$ = yy.crearNodo('do while',_$[$0-8].first_line,_$[$0-8].first_column,[$$[$0-6],$$[$0-2]])
        
break;
case 83:

        this.$ = yy.crearNodo('else',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-1]])
    
break;
case 85:

            this.$ = yy.crearNodo('lista else if',0,0,[$$[$0]])
        
break;
case 86:

        this.$ = yy.crearNodo('else if',_$[$0-7].first_line,_$[$0-7].first_column,[$$[$0-4],$$[$0-1]])
    
break;
case 87:
this.$ = yy.crearNodo('print',_$[$0-3].first_line,_$[$0-3].first_column,[yy.crearNodo('EXP',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-1]])])
break;
case 88:
this.$ = yy.crearNodo('print',_$[$0-4].first_line,_$[$0-4].first_column,[yy.crearNodo('EXP',_$[$0-4].first_line,_$[$0-4].first_column,[$$[$0-2]])])
break;
case 89:

		this.$ = yy.crearNodo('declaracionFuncion',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-7],yy.crearHoja($$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column),$$[$0-4],$$[$0-1]])
	
break;
case 90:

		this.$ = yy.crearNodo('declaracionFuncion',_$[$0-6].first_line,_$[$0-6].first_column,[yy.crearHoja($$[$0-7],_$[$0-7].first_line,_$[$0-7].first_column),yy.crearHoja($$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column),$$[$0-4],$$[$0-1]])
	
break;
case 91:

		this.$ = yy.crearNodo('declaracionFuncion',_$[$0-5].first_line,_$[$0-5].first_column,[$$[$0-6],yy.crearHoja($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column),$$[$0-1]])
	
break;
case 92:

		this.$ = yy.crearNodo('declaracionFuncion',_$[$0-5].first_line,_$[$0-5].first_column,[yy.crearHoja($$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column),yy.crearHoja($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column),$$[$0-1]])
	
break;
case 94:

            this.$ = yy.crearNodo('patametros',0,0,[$$[$0]])
        
break;
case 95:
this.$ = yy.crearNodo('parametro',_$[$0].first_line,_$[$0].first_column,[$$[$0-1],yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)])
break;
case 96:

            if($$[$0] == ''){
                this.$ = yy.crearNodo('inicializando variable sin tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
            }
            else{
                this.$ = yy.crearNodo('inicializando variable sin tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
            }
        
break;
case 97:

            if($$[$0] == ''){
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],$$[$0-1]]);
            }
            else{
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],$$[$0-1],$$[$0]]);
            }
        
break;
case 98:

            if($$[$0] == ''){
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),$$[$0-1]]);
            }
            else{
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),$$[$0-1],$$[$0]]);
            }
        
break;
case 99:

            if($$[$0] == ''){
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
            }
            else{
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
            }
        
break;
case 100:

            if($$[$0] == ''){
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
            }
            else{
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
            }
        
break;
case 101:

            this.$ = yy.crearNodo('inicializando variable sin tipo',0,0,[$$[$0-1],yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column),$$[$01]]);
        
break;
case 102:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-1],$$[$0]]);
        
break;
case 103:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
        
break;
case 104:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-1],yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)]);
        
break;
case 105:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)]);
        
break;
case 106:

            this.$ = yy.crearNodo('inicializando variable sin tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
        
break;
case 107:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],$$[$0-1],$$[$0]]);
        
break;
case 108:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),$$[$0-1],$$[$0]]);
        
break;
case 109:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
        
break;
case 110:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
        
break;
case 111:
 
            $$[$0].setHijo(yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column))
            this.$ = $$[$0]
        
break;
case 112:

            $$[$0-2].setHijo(yy.crearHoja($$[$0],0,0))
            this.$ = $$[$0-2]
        
break;
case 113:
            
            this.$ = yy.crearNodo('listaIds',0,0,[yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)])
        
break;
case 114:
this.$ = yy.crearNodo('EXP',0,0,[$$[$0-1],yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)]);
break;
case 115: case 117:
this.$ = yy.crearNodo('EXP',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
break;
case 116:
this.$ = yy.crearNodo('EXP',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0-1],yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)]);
break;
case 118:
this.$ = ''
break;
case 119: case 120:
this.$ = yy.crearNodo('EXP',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0]]);
break;
case 121: case 123:

            this.$ = yy.crearNodo('asignacion',0,0,[$$[$0-3],$$[$0-1],yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)]);
        
break;
case 122: case 124:

            this.$ = yy.crearNodo('asignacion',0,0,[$$[$0-2],$$[$0],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
        
break;
case 125: case 126:

            this.$ = yy.crearNodo('asignacion',0,0,[[$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column],$$[$0]]);
        
break;
case 127:
            
            $$[$0-2].setHijo(yy.crearHoja($$[$0],0,0))
        
break;
case 128:

            this.$ = yy.crearNodo('identificadorAsignacion',0,0,[$$[$0]])
        
break;
case 129:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('identificador',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 130:
this.$ = yy.crearHoja('integer',_$[$0].first_line,_$[$0].first_column)
break;
case 131:
this.$ = yy.crearHoja('char',_$[$0].first_line,_$[$0].first_column)
break;
case 132:
this.$ = yy.crearHoja('boolean',_$[$0].first_line,_$[$0].first_column)
break;
case 133:
this.$ = yy.crearHoja('void',_$[$0].first_line,_$[$0].first_column)
break;
case 134:
this.$ = yy.crearHoja('var',_$[$0].first_line,_$[$0].first_column)
break;
case 135:
this.$ = yy.crearHoja('const',_$[$0].first_line,_$[$0].first_column)
break;
case 136:
this.$ = yy.crearHoja('global',_$[$0].first_line,_$[$0].first_column)
break;
case 137:
this.$ = yy.crearNodo('+',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 138:
this.$ = yy.crearNodo('-',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 139:
this.$ = yy.crearNodo('*',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 140:
this.$ = yy.crearNodo('/',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 141:
this.$ = yy.crearNodo('^^',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 142:
this.$ = yy.crearNodo('^',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 143:
this.$ = yy.crearNodo('<',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 144:
this.$ = yy.crearNodo('>',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 145:
this.$ = yy.crearNodo('<=',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 146:
this.$ = yy.crearNodo('>=',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 147:
this.$ = yy.crearNodo('%',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 148:
this.$ = yy.crearNodo('<>',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 149:
this.$ = yy.crearNodo('&&',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 150:
this.$ = yy.crearNodo('||',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 151:
this.$ = yy.crearNodo('==',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 152:
this.$ = yy.crearNodo('===',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 153:
this.$ = yy.crearNodo('!',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0]])
break;
case 154:
this.$ = yy.crearNodo('-',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0]])
break;
case 155:
this.$ = $$[$0-1];
break;
case 156:
this.$ = yy.crearNodo('literal',0,0,[$$[$0]])
break;
case 157:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('entero',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 158:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('decimal',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 159:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('cadena',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 160:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('caracter',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 161:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('identificacdor',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 162: case 163:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('boleano',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 164:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('nulo',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 167:

            this.$ = $$[$0];
        
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,17:$V1,70:11,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{1:[3]},{5:[1,22]},{5:[2,2],7:23,8:5,9:6,10:7,11:8,12:$V0,17:$V1,70:11,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),{13:24,16:25,17:$Va},{17:[1,27]},{17:[1,29],75:28},o($Vb,$Vc,{75:30,17:[1,31]}),{18:$Vd,41:[1,32],42:[1,33]},{17:[2,134]},{17:[2,135]},{17:[2,136]},{17:[2,130]},{17:[2,131]},{17:[2,132]},{17:[2,133]},o($Vb,[2,128]),{1:[2,1]},o($V9,[2,3]),o($V9,[2,9],{14:[1,35],15:[1,36]}),o($Ve,[2,12]),{18:[1,37]},o($Vf,[2,101],{74:38,14:$Vg,41:$Vh,42:$Vi}),o($Vf,[2,102],{74:42,14:$Vg,41:$Vh,42:$Vi}),o($V9,$Vj,{74:43,14:$Vg,15:$Vk,34:[1,44],41:$Vh,42:$Vi}),o($Vf,[2,103],{74:46,14:$Vg,41:$Vh,42:$Vi}),o($V9,$Vl,{74:47,14:$Vg,15:$Vk,34:[1,48],41:$Vh,42:$Vi}),{17:$Vm,34:$Vn,38:62,39:49,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:63,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:[1,65],79:64},o($V9,[2,10]),{16:66,17:$Va},{17:[1,67]},o($Vf,[2,96]),{17:$Vm,34:$Vn,38:62,39:68,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:69,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},o($Vf,[2,118]),o($Vf,[2,97]),o($Vf,[2,99]),{35:[1,71],70:73,71:70,72:72,80:$V2,81:$V3,82:$V4,83:$V5},{17:[1,75],77:74},o($Vf,[2,98]),o($Vf,[2,100]),{35:[1,77],70:73,71:76,72:72,80:$V2,81:$V3,82:$V4,83:$V5},o($Vf,[2,122],{14:[1,78],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM}),{17:$Vm,34:$Vn,38:62,39:95,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:96,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:97,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},o($VN,[2,156]),o($VN,[2,157]),o($VN,[2,158]),o($VN,[2,159]),o($VN,[2,160]),o($VN,$VO,{32:$VP,33:$VQ,34:$VR}),o($VN,[2,162]),o($VN,[2,163]),o($VN,[2,164]),o($VN,[2,167]),o($Vf,[2,124],{14:[1,101],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM}),o($Vb,[2,127]),o($Vb,$Vc),o($Ve,[2,11]),o($Ve,[2,13]),o($Vf,[2,115],{14:[1,102],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM}),o($Vf,[2,117],{14:[1,103],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM}),{15:$VS,35:[1,104]},{48:[1,106]},o($VT,[2,94]),{17:[1,107]},o([5,12,14,17,41,42,43,44,45,47,50,53,56,57,62,65,66,69,80,81,82,83,84,85,86],[2,111],{15:[1,108]}),o($VU,[2,113]),{15:$VS,35:[1,109]},{48:[1,110]},o($Vf,[2,121]),{17:$Vm,34:$Vn,38:62,39:111,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:112,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:113,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:114,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:115,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:116,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:117,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:118,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:119,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:120,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:121,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:122,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:123,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:124,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:125,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:126,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},o($VV,[2,153],{88:$Vy}),o($VV,[2,154],{88:$Vy}),{35:[1,127],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},o($VN,[2,165]),o($VN,[2,166]),{17:$VW,34:$Vn,35:[1,128],36:129,37:130,38:62,39:131,40:132,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},o($Vf,[2,123]),o($Vf,[2,114]),o($Vf,[2,116]),{48:[1,134]},{70:73,72:135,80:$V2,81:$V3,82:$V4,83:$V5},{9:138,10:139,17:$VX,19:136,20:137,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},o($VT,[2,95]),{17:[1,162]},{48:[1,163]},{9:138,10:139,17:$VX,19:164,20:137,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},o([5,12,14,15,17,35,43,44,45,47,50,53,54,56,57,62,65,66,69,80,81,82,83,84,85,86,87,92,93,94,95,96,98,99,100,101,102],[2,137],{88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VH}),o($VV,[2,138],{88:$Vy}),o($V51,[2,139],{88:$Vy,91:$VB}),o($V51,[2,140],{88:$Vy,91:$VB}),o($V51,[2,141],{88:$Vy,91:$VB}),o([5,12,14,15,17,35,43,44,45,47,50,53,54,56,57,62,65,66,69,80,81,82,83,84,85,86,92],[2,142],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM}),o($V61,[2,143],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VH}),o($V61,[2,144],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VH}),o($V61,[2,145],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VH}),o($V61,[2,146],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,97:$VH}),o($V51,[2,147],{88:$Vy,91:$VB}),o($V71,[2,148],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH}),o([5,12,14,15,17,35,43,44,45,47,50,53,54,56,57,62,65,66,69,80,81,82,83,84,85,86,92,99,100],[2,149],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,101:$VL,102:$VM}),o([5,12,14,15,17,35,43,44,45,47,50,53,54,56,57,62,65,66,69,80,81,82,83,84,85,86,92,100],[2,150],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,101:$VL,102:$VM}),o($V71,[2,151],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH}),o($V71,[2,152],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH}),o($VN,[2,155]),o($VN,[2,39]),{15:$V81,35:[1,165]},{15:$V91,35:[1,167]},o($VT,[2,43],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM}),o($VT,[2,45]),o([15,35,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],$VO,{32:$VP,33:$VQ,34:$VR,41:$Va1,42:$Vb1}),{9:138,10:139,17:$VX,19:171,20:137,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},o($VT,[2,93]),{9:138,10:139,17:$VX,20:173,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,50:[1,172],57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},o($Vc1,[2,15]),o($Vc1,[2,16]),o($Vc1,[2,17]),o($Vc1,[2,18]),o($Vc1,[2,19]),o($Vc1,[2,20]),o($Vc1,[2,21]),o($Vc1,[2,22]),o($Vc1,[2,23]),o($Vc1,[2,24]),o($Vc1,[2,25]),o($Vc1,[2,26]),o($Vc1,[2,27]),o($Vc1,[2,28]),{17:[1,174],75:28},o($Vb,$Vc,{75:30,17:[1,175],32:[1,177],33:[1,178],34:[1,176]}),{34:[1,179]},{34:[1,180]},{34:[1,181]},{48:[1,182]},{34:[1,183]},{34:[1,184]},o($Vc1,[2,48],{14:[1,185]}),o($Vc1,[2,50],{14:[1,186]}),{14:[1,188],17:$Vm,34:$Vn,38:62,39:189,46:187,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},o($VU,[2,112]),{9:138,10:139,17:$VX,19:190,20:137,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{9:138,10:139,17:$VX,20:173,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,50:[1,191],57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},o($VN,[2,40]),{17:$Vm,34:$Vn,38:62,39:192,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},o($VN,[2,41]),{17:[1,194],40:193},{17:$Vm,34:$Vn,38:62,39:195,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:196,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{9:138,10:139,17:$VX,20:173,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,50:[1,197],57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},o($V9,[2,91]),o($Vc1,[2,14]),o($Vc1,$Vj,{74:43,14:$Vg,15:$Vk,41:$Vh,42:$Vi}),o($Vc1,$Vl,{74:47,14:$Vg,15:$Vk,41:$Vh,42:$Vi}),{17:$VW,34:$Vn,35:[1,198],36:199,37:200,38:62,39:131,40:132,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},o($Vc1,[2,29],{14:[1,201]}),o($Vc1,[2,30],{14:[1,202]}),{17:$Vm,34:$Vn,38:62,39:203,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:204,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:205,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{9:138,10:139,17:$VX,19:206,20:137,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{14:[1,209],17:[1,214],58:207,59:208,60:210,61:211,70:213,73:212,78:215,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{17:$Vm,34:$Vn,38:62,39:216,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},o($Vc1,[2,49]),o($Vc1,[2,51]),o($Vc1,[2,52]),o($Vc1,[2,53]),o($Vc1,[2,54],{14:[1,217],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM}),{9:138,10:139,17:$VX,20:173,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,50:[1,218],57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},o($V9,[2,92]),o($VT,[2,42],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM}),o($VT,[2,44]),{41:$Va1,42:$Vb1},o($VT,[2,46],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM}),o($VT,[2,47],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM}),o($V9,[2,89]),o($Vc1,[2,34],{14:[1,219]}),{15:$V81,35:[1,220]},{15:$V91,35:[1,221]},o($Vc1,[2,31]),o($Vc1,[2,32]),{35:[1,222],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},{35:[1,223],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},{35:[1,224],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},{9:138,10:139,17:$VX,20:173,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,50:[1,225],57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{35:[1,226]},{14:[1,227]},{14:[1,229],17:$Vm,34:$Vn,38:62,39:228,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{14:[2,74]},{14:[2,75]},{17:[1,230]},{17:[1,232],75:231},o($Vb,$Vc,{75:233,17:[1,234]}),{18:$Vd,41:[1,235],42:[1,236]},{35:[1,237],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},o($Vc1,[2,55]),o($V9,[2,90]),o($Vc1,[2,33]),o($Vc1,[2,36],{14:[1,238]}),o($Vc1,[2,38],{14:[1,239]}),o($Vc1,[2,87],{14:[1,240]}),{48:[1,241]},{48:[1,242]},{65:[1,243]},{48:[1,244]},{14:[1,246],17:$Vm,34:$Vn,38:62,39:245,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{14:[1,247],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},{17:$Vm,34:$Vn,35:[2,73],38:62,39:248,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{41:$Vd1,42:$Ve1,76:249},{41:$Vd1,42:$Ve1,76:252},{15:$Vk,41:$Vd1,42:$Ve1,76:253},{41:$Vd1,42:$Ve1,76:254},{15:$Vk,41:$Vd1,42:$Ve1,76:255},{17:$Vm,34:$Vn,38:62,39:256,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:257,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{48:[1,258]},o($Vc1,[2,35]),o($Vc1,[2,37]),o($Vc1,[2,88]),{9:138,10:139,17:$VX,19:259,20:137,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{9:138,10:139,17:$VX,19:260,20:137,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{34:[1,261]},{9:138,10:139,17:$VX,19:262,20:137,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{14:[1,263],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},{17:$Vm,34:$Vn,38:62,39:264,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,35:[2,71],38:62,39:265,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{35:[2,72],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},{14:[2,106]},{17:$Vm,34:$Vn,38:62,39:266,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{17:$Vm,34:$Vn,38:62,39:267,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{14:[2,107]},{14:[2,109]},{14:[2,108]},{14:[2,110]},{14:[2,125],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},{14:[2,126],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},{49:268,51:269,52:270,53:$Vf1,55:271,56:$Vg1},{9:138,10:139,17:$VX,20:173,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,50:[1,274],57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{9:138,10:139,17:$VX,20:173,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,50:[1,275],57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{17:$Vm,34:$Vn,38:62,39:276,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{9:138,10:139,17:$VX,20:173,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,50:[1,277],57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{17:$Vm,34:$Vn,35:[2,69],38:62,39:278,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},{35:[2,68],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},{35:[2,70],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},{14:[2,119],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},{14:[2,120],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},{50:[1,279]},{50:[2,58],52:280,53:$Vf1,55:281,56:$Vg1},{50:[2,59]},o($Vh1,[2,65]),{54:[1,282]},{17:$Vm,34:$Vn,38:62,39:283,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},o($Vc1,[2,76],{63:284,64:285,68:287,67:$Vi1}),o($Vc1,[2,80]),{35:[1,288],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},o($Vc1,[2,66]),{35:[2,67],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},o($Vc1,[2,56]),{50:[2,57]},o($Vh1,[2,64]),{9:138,10:139,17:$VX,19:289,20:137,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,50:[2,61],57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{54:[1,290],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},o($Vc1,[2,77]),o($Vc1,[2,79],{63:291,68:292,67:$Vi1}),{48:[1,293],62:[1,294]},o($Vj1,[2,85]),o($Vc1,[2,81],{14:[1,295]}),{9:138,10:139,17:$VX,20:173,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,50:[2,60],57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},o($Vh1,[2,62],{73:10,78:13,79:21,20:137,9:138,10:139,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,70:151,19:296,17:$VX,43:$VY,44:$VZ,45:$V_,47:$V$,57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8}),o($Vc1,[2,78]),o($Vj1,[2,84]),{9:138,10:139,17:$VX,19:297,20:137,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{34:[1,298]},o($Vc1,[2,82]),o($Vh1,[2,63],{73:10,78:13,79:21,9:138,10:139,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,70:151,20:173,17:$VX,43:$VY,44:$VZ,45:$V_,47:$V$,57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8}),{9:138,10:139,17:$VX,20:173,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,50:[1,299],57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{17:$Vm,34:$Vn,38:62,39:300,88:$Vo,103:$Vp,104:53,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw},o($Vc1,[2,83]),{35:[1,301],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM},{48:[1,302]},{9:138,10:139,17:$VX,19:303,20:137,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{9:138,10:139,17:$VX,20:173,21:140,22:141,23:142,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:150,43:$VY,44:$VZ,45:$V_,47:$V$,50:[1,304],57:$V01,62:$V11,65:$V21,66:$V31,69:$V41,70:151,73:10,78:13,79:21,80:$V2,81:$V3,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},o($Vj1,[2,86])],
defaultActions: {14:[2,134],15:[2,135],16:[2,136],17:[2,130],18:[2,131],19:[2,132],20:[2,133],22:[2,1],210:[2,74],211:[2,75],249:[2,106],252:[2,107],253:[2,109],254:[2,108],255:[2,110],270:[2,59],280:[2,57]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments          */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content   */
break;
case 4:/* skip whitespace        */
break;
case 5:return 34;
break;
case 6:return 35;
break;
case 7:return 48;
break;
case 8:return 50;
break;
case 9:return '[';
break;
case 10:return ']';
break;
case 11:return 33;
break;
case 12:return 32;
break;
case 13:return 89;
break;
case 14:return 90;
break;
case 15:return 88;
break;
case 16:return 87;
break;
case 17:return 91;
break;
case 18:return 92;
break;
case 19:return 97;
break;
case 20:return 98;
break;
case 21:return 93;
break;
case 22:return 94;
break;
case 23:return 95;
break;
case 24:return 96;
break;
case 25:return 101;
break;
case 26:return 102;
break;
case 27:return 99;
break;
case 28:return 100;
break;
case 29:return '?';
break;
case 30:return 103;
break;
case 31:return 111;
break;
case 32:return 80;
break;
case 33:return 'double';
break;
case 34:return 81;
break;
case 35:return 12;
break;
case 36:return 84;
break;
case 37:return 85;
break;
case 38:return 86;
break;
case 39:return 109;
break;
case 40:return 110;
break;
case 41:return 62;
break;
case 42:return 67;
break;
case 43:return 47;
break;
case 44:return 56;
break;
case 45:return 53;
break;
case 46:return 43;
break;
case 47:return 44;
break;
case 48:return 45;
break;
case 49:return 69;
break;
case 50:return 83;
break;
case 51:return 57;
break;
case 52:return 65;
break;
case 53:return 'define';
break;
case 54:return 'as';
break;
case 55:return 'strc';
break;
case 56:return 66;
break;
case 57:return 'try';
break;
case 58:return 'catch';
break;
case 59:return 'throw';
break;
case 60:return 42;
break;
case 61:return 54;
break;
case 62:return 14;
break;
case 63:return 15;
break;
case 64:return 41;
break;
case 65:return 18;
break;
case 66:return 106;
break;
case 67:return 105;
break;
case 68: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 107; 
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 108; 
break;
case 70:return 17;
break;
case 71:return 5;
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:--)/,/^(?:\+\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:%)/,/^(?:<>)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:===)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\?)/,/^(?:!)/,/^(?:null\b)/,/^(?:integer\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:import\b)/,/^(?:var\b)/,/^(?:const\b)/,/^(?:global\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:print\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:define\b)/,/^(?:as\b)/,/^(?:strc\b)/,/^(?:do\b)/,/^(?:try\b)/,/^(?:catch\b)/,/^(?:throw\b)/,/^(?::=)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:=)/,/^(?:\.)/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:"[^\"]*")/,/^(?:'[^\"]?')/,/^(?:[a-zA-ZñÑ_][a-zA-ZñÑ0-9_]*)/,/^(?:$)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = calc;
exports.Parser = calc.Parser;
exports.parse = function () { return calc.parse.apply(calc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}