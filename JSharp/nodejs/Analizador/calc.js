/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,12],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[5,12,17,76,77,78,79,80,81,82],$Va=[1,26],$Vb=[18,37,38],$Vc=[2,121],$Vd=[1,34],$Ve=[5,12,14,15,17,76,77,78,79,80,81,82],$Vf=[5,12,17,39,40,41,43,46,49,52,53,58,61,62,65,76,77,78,79,80,81,82],$Vg=[1,41],$Vh=[1,40],$Vi=[1,39],$Vj=[2,96],$Vk=[1,45],$Vl=[2,97],$Vm=[1,58],$Vn=[1,52],$Vo=[1,51],$Vp=[1,50],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,59],$Vv=[1,60],$Vw=[1,61],$Vx=[1,78],$Vy=[1,79],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[1,86],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[1,93],$VN=[5,12,14,15,17,32,39,40,41,43,46,49,50,52,53,58,61,62,65,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],$VO=[2,153],$VP=[1,101],$VQ=[15,32],$VR=[5,12,14,15,17,37,38,39,40,41,43,46,49,52,53,58,61,62,65,76,77,78,79,80,81,82],$VS=[5,12,14,15,17,32,39,40,41,43,46,49,50,52,53,58,61,62,65,76,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98],$VT=[1,141],$VU=[1,148],$VV=[1,149],$VW=[1,150],$VX=[1,147],$VY=[1,146],$VZ=[1,143],$V_=[1,144],$V$=[1,145],$V01=[1,142],$V11=[5,12,14,15,17,32,39,40,41,43,46,49,50,52,53,58,61,62,65,76,77,78,79,80,81,82,83,85,86,88,89,90,91,92,93,94,95,96,97,98],$V21=[5,12,14,15,17,32,39,40,41,43,46,49,50,52,53,58,61,62,65,76,77,78,79,80,81,82,88,89,90,91,92,94,95,96,97,98],$V31=[5,12,14,15,17,32,39,40,41,43,46,49,50,52,53,58,61,62,65,76,77,78,79,80,81,82,88,94,95,96,97,98],$V41=[17,39,40,41,43,46,49,52,53,58,61,62,65,76,77,78,79,80,81,82],$V51=[1,201],$V61=[1,202],$V71=[1,237],$V81=[1,236],$V91=[1,258],$Va1=[1,259],$Vb1=[46,49,52],$Vc1=[1,272],$Vd1=[17,39,40,41,43,46,49,52,53,58,61,62,63,65,76,77,78,79,80,81,82];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"raiz":4,"EOF":5,"listaCuerpo":6,"sentenciasCuerpo":7,"importar":8,"declaracion_variables":9,"asignacion":10,"declaracionFuncion":11,"import":12,"imports":13,";":14,",":15,"nombremports":16,"id":17,".":18,"bloque":19,"sentenciasBloque":20,"imprmir":21,"sentenciasif":22,"sentenciaWhile":23,"sentenciaDoWhile":24,"sentenciaFor":25,"sentenciaSwitch":26,"sentenciaBreak":27,"sentenciaContinue":28,"sentenciaReturn":29,"llamadaFuncion":30,"(":31,")":32,"listaExp":33,"listaAsignacion":34,"EXP":35,"asignacionLlamada":36,"=":37,":=":38,"break":39,"continue":40,"return":41,"sentenciaReturnEXP":42,"switch":43,"{":44,"bloqueSwitch":45,"}":46,"listaBloqueSwitch":47,"sentenciaDefault":48,"default":49,":":50,"sentenciaCase":51,"case":52,"for":53,"instruccionesFor":54,"inicioFor":55,"declaracionVariablesFor":56,"asignacionFor":57,"if":58,"sentencaElse":59,"listaElseIf":60,"while":61,"do":62,"else":63,"elseIf":64,"print":65,"tipoDato":66,"patametros":67,"patametro":68,"tipoVCG":69,"inicializador_variable":70,"listaIds":71,"inicializadorVariableFor":72,"listaIds2":73,"listaIdVecFun":74,"tipoId":75,"integer":76,"char":77,"boolean":78,"void":79,"var":80,"const":81,"global":82,"+":83,"-":84,"*":85,"/":86,"^^":87,"^":88,"<":89,">":90,"<=":91,">=":92,"%":93,"<>":94,"&&":95,"||":96,"==":97,"===":98,"!":99,"literal":100,"entero":101,"decimal":102,"cadena":103,"caracter":104,"true":105,"false":106,"null":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"import",14:";",15:",",17:"id",18:".",31:"(",32:")",37:"=",38:":=",39:"break",40:"continue",41:"return",43:"switch",44:"{",46:"}",49:"default",50:":",52:"case",53:"for",58:"if",61:"while",62:"do",63:"else",65:"print",76:"integer",77:"char",78:"boolean",79:"void",80:"var",81:"const",82:"global",83:"+",84:"-",85:"*",86:"/",87:"^^",88:"^",89:"<",90:">",91:"<=",92:">=",93:"%",94:"<>",95:"&&",96:"||",97:"==",98:"===",99:"!",101:"entero",102:"decimal",103:"cadena",104:"caracter",105:"true",106:"false",107:"null"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,1],[7,1],[8,2],[8,3],[13,3],[13,1],[16,3],[19,2],[19,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[30,4],[30,3],[30,5],[30,4],[30,5],[30,4],[33,3],[33,1],[34,3],[34,1],[36,3],[36,3],[27,1],[27,2],[28,1],[28,2],[29,2],[42,1],[42,1],[42,2],[26,7],[45,2],[45,1],[45,1],[48,3],[48,2],[51,3],[51,4],[47,2],[47,1],[25,7],[54,5],[54,4],[54,4],[54,4],[54,3],[54,3],[54,2],[55,1],[55,1],[22,7],[22,8],[22,9],[22,8],[23,7],[24,8],[24,9],[59,4],[60,2],[60,1],[64,8],[21,4],[21,5],[11,8],[11,8],[11,7],[11,7],[67,3],[67,1],[68,2],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,2],[9,2],[9,2],[56,3],[56,3],[56,3],[56,3],[56,3],[71,3],[73,3],[73,1],[70,3],[70,2],[70,3],[70,2],[70,1],[72,2],[72,2],[10,4],[10,3],[10,4],[10,3],[57,3],[57,3],[74,3],[74,1],[75,1],[66,1],[66,1],[66,1],[66,1],[69,1],[69,1],[69,1],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,2],[35,3],[35,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
this.$ = yy.ast.hijos = $$[$0]
break;
case 3: case 14: case 56: case 76:

            $$[$0-1].setHijo($$[$0])
            this.$ = $$[$0-1]
        
break;
case 4:

            this.$ = yy.crearNodo('cuerpo',0,0,[$$[$0]])
        
break;
case 5: case 6: case 7: case 8: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 66: case 67:
this.$ = $$[$0];
break;
case 9:
yy.imprimirToquen($$[$0]); this.$ = yy.crearNodo('import',0,0,[$$[$0]])
break;
case 10:
this.$ = yy.crearNodo('import',0,0,[$$[$0-1]])
break;
case 11: case 34: case 36: case 85:

            $$[$0-2].setHijo($$[$0])
            this.$ = $$[$0-2]
        
break;
case 12:

            this.$ = yy.crearNodo('imports',0,0,[$$[$0]])
        
break;
case 13:

        this.$ = yy.crearNodo('nombre',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)])   
    
break;
case 15:

            this.$ = yy.crearNodo('bloque',0,0,[$$[$0]])
        
break;
case 28:

                this.$ = yy.crearNodo('llamadaFuncion',_$[$0-3].first_line,_$[$0-3].first_column,[yy.crearHoja($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column)])
        
break;
case 29:

                this.$ = yy.crearNodo('llamadaFuncion',_$[$0-2].first_line,_$[$0-2].first_column,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)])
        
break;
case 30: case 32:

                this.$ = yy.crearNodo('llamadaFuncion',_$[$0-4].first_line,_$[$0-4].first_column,[yy.crearHoja($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column),$$[$0-2]])
        
break;
case 31: case 33:

                this.$ = yy.crearNodo('llamadaFuncion',_$[$0-3].first_line,_$[$0-3].first_column,[yy.crearHoja($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column),$$[$0-1]])
        
break;
case 35:

            this.$ = yy.crearNodo('listaExpresiones',0,0,[$$[$0]])
        
break;
case 37:

            this.$ = yy.crearNodo('listaAsignaciones',0,0,[$$[$0]])
        
break;
case 38: case 39:

            this.$ = yy.crearNodo('asignacion',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),$$[$0],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
        
break;
case 40:

            this.$ = yy.crearHoja('break',_$[$0].first_line,_$[$0].first_column)   
        
break;
case 41:

            this.$ = yy.crearHoja('break',_$[$0-1].first_line,_$[$0-1].first_column)   
        
break;
case 42:

            this.$ = yy.crearHoja('continue',_$[$0].first_line,_$[$0].first_column)   
        
break;
case 43:

            this.$ = yy.crearHoja('continue',_$[$0-1].first_line,_$[$0-1].first_column)   
        
break;
case 48:

            this.$ = yy.crearNodo('switch',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-4],$$[$0-1]])
        
break;
case 49:

            this.$ = yy.crearNodo('bloqueSwitch',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-1],$$[$0]])
        
break;
case 50:

                this.$ = yy.crearNodo('bloqueSwitchCases',_$[$0].first_line,_$[$0].first_column,[$$[$0]])
        
break;
case 51:

                this.$ = yy.crearNodo('bloqueSwitchDefault',_$[$0].first_line,_$[$0].first_column,[$$[$0]])
        
break;
case 52:

            this.$ = yy.crearNodo('default',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0]])
        
break;
case 53:

            this.$ = yy.crearNodo('default',_$[$0-1].first_line,_$[$0-1].first_column,[])
        
break;
case 54:

            this.$ = yy.crearNodo('case',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0-1]])
        
break;
case 55:

            this.$ = yy.crearNodo('case',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-2],$$[$0]])
        
break;
case 57:

            this.$ = yy.crearNodo('listaSwitch',0,0,[$$[$0]])
        
break;
case 58:

        this.$ = yy.crearNodo('for',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-4],$$[$0-1]])
    
break;
case 59:

            instruccion1 = yy.crearNodo('instruccion1',_$[$0-4].first_line,_$[$0-4].first_column,[$$[$0-4]]) 
            instruccion2 = yy.crearNodo('instruccion2',_$[$0-4].first_line,_$[$0-4].first_column,[$$[$0-2]])    
            instruccion3 = yy.crearNodo('instruccion3',_$[$0-4].first_line,_$[$0-4].first_column,[$$[$0]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-4].first_line,_$[$0-4].first_column,[instruccion1,instruccion2,instruccion3])
        
break;
case 60:

            instruccion1 = yy.crearNodo('instruccion1',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-3]])    
            instruccion3 = yy.crearNodo('instruccion3',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-3].first_line,_$[$0-3].first_column,[instruccion1,instruccion3])
        
break;
case 61:

            instruccion1 = yy.crearNodo('instruccion1',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-3]])    
            instruccion2 = yy.crearNodo('instruccion2',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-1]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-3].first_line,_$[$0-3].first_column,[instruccion1,instruccion2])
        
break;
case 62:

            instruccion2 = yy.crearNodo('instruccion2',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-2]])    
            instruccion3 = yy.crearNodo('instruccion3',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-3].first_line,_$[$0-3].first_column,[instruccion2,instruccion3])
        
break;
case 63:

            instruccion2 = yy.crearNodo('instruccion2',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0-1]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-2].first_line,_$[$0-2].first_column,[instruccion2])
        
break;
case 64:

            instruccion3 = yy.crearNodo('instruccion3',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0]])    
            this.$ = yy.crearNodo('instrucciones',_$[$0-2].first_line,_$[$0-2].first_column,[instruccion3])
        
break;
case 65:
this.$ = yy.crearNodo('instrucciones',_$[$0-1].first_line,_$[$0-1].first_column,[])
break;
case 68:

            bloque = yy.crearNodo('if',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-4],$$[$0-1]])
            nodoIf = yy.crearNodo('ifs',_$[$0-6].first_line,_$[$0-6].first_column,[bloque])      
            this.$ = yy.crearNodo('ifInstruccion',_$[$0-6].first_line,_$[$0-6].first_column,[nodoIf])
        
break;
case 69:

            bloque = yy.crearNodo('if',_$[$0-7].first_line,_$[$0-7].first_column,[$$[$0-5],$$[$0-2]])    
            nodoIf = yy.crearNodo('ifs',_$[$0-7].first_line,_$[$0-7].first_column,[bloque])      
            this.$ = yy.crearNodo('ifInstruccion',_$[$0-7].first_line,_$[$0-7].first_column,[nodoIf,$$[$0]])
        
break;
case 70:

            bloque = yy.crearNodo('if',_$[$0-8].first_line,_$[$0-8].first_column,[$$[$0-6],$$[$0-3]])    
            nodoIf = yy.crearNodo('ifs',_$[$0-8].first_line,_$[$0-8].first_column,[bloque,$$[$0-1]])      
            this.$ = yy.crearNodo('ifInstruccion',_$[$0-8].first_line,_$[$0-8].first_column,[nodoIf,$$[$0]])
        
break;
case 71:

            bloque = yy.crearNodo('if',_$[$0-7].first_line,_$[$0-7].first_column,[$$[$0-5],$$[$0-2]])    
            nodoIf = yy.crearNodo('ifs',_$[$0-7].first_line,_$[$0-7].first_column,[bloque,$$[$0]])      
            this.$ = yy.crearNodo('ifInstruccion',_$[$0-7].first_line,_$[$0-7].first_column,[nodoIf])
        
break;
case 72:

        this.$ = yy.crearNodo('while',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-4],$$[$0-1]])
    
break;
case 73:

            this.$ = yy.crearNodo('do while',_$[$0-7].first_line,_$[$0-7].first_column,[$$[$0-5],$$[$0-1]])
        
break;
case 74:

            this.$ = yy.crearNodo('do while',_$[$0-8].first_line,_$[$0-8].first_column,[$$[$0-6],$$[$0-2]])
        
break;
case 75:

        this.$ = yy.crearNodo('else',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-1]])
    
break;
case 77:

            this.$ = yy.crearNodo('lista else if',0,0,[$$[$0]])
        
break;
case 78:

        this.$ = yy.crearNodo('else if',_$[$0-7].first_line,_$[$0-7].first_column,[$$[$0-4],$$[$0-1]])
    
break;
case 79:
this.$ = yy.crearNodo('print',_$[$0-3].first_line,_$[$0-3].first_column,[yy.crearNodo('EXP',_$[$0-3].first_line,_$[$0-3].first_column,[$$[$0-1]])])
break;
case 80:
this.$ = yy.crearNodo('print',_$[$0-4].first_line,_$[$0-4].first_column,[yy.crearNodo('EXP',_$[$0-4].first_line,_$[$0-4].first_column,[$$[$0-2]])])
break;
case 81:

		this.$ = yy.crearNodo('declaracionFuncion',_$[$0-6].first_line,_$[$0-6].first_column,[$$[$0-7],yy.crearHoja($$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column),$$[$0-4],$$[$0-1]])
	
break;
case 82:

		this.$ = yy.crearNodo('declaracionFuncion',_$[$0-6].first_line,_$[$0-6].first_column,[yy.crearHoja($$[$0-7],_$[$0-7].first_line,_$[$0-7].first_column),yy.crearHoja($$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column),$$[$0-4],$$[$0-1]])
	
break;
case 83:

		this.$ = yy.crearNodo('declaracionFuncion',_$[$0-5].first_line,_$[$0-5].first_column,[$$[$0-6],yy.crearHoja($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column),$$[$0-1]])
	
break;
case 84:

		this.$ = yy.crearNodo('declaracionFuncion',_$[$0-5].first_line,_$[$0-5].first_column,[yy.crearHoja($$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column),yy.crearHoja($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column),$$[$0-1]])
	
break;
case 86:

            this.$ = yy.crearNodo('patametros',0,0,[$$[$0]])
        
break;
case 87:
this.$ = yy.crearNodo('parametro',_$[$0].first_line,_$[$0].first_column,[$$[$0-1],yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)])
break;
case 88:

            if($$[$0] == ''){
                this.$ = yy.crearNodo('inicializando variable sin tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
            }
            else{
                this.$ = yy.crearNodo('inicializando variable sin tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
            }
        
break;
case 89:

            if($$[$0] == ''){
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],$$[$0-1]]);
            }
            else{
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],$$[$0-1],$$[$0]]);
            }
        
break;
case 90:

            if($$[$0] == ''){
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),$$[$0-1]]);
            }
            else{
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),$$[$0-1],$$[$0]]);
            }
        
break;
case 91:

            if($$[$0] == ''){
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
            }
            else{
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
            }
        
break;
case 92:

            if($$[$0] == ''){
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
            }
            else{
                this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
            }
        
break;
case 93:

            this.$ = yy.crearNodo('inicializando variable sin tipo',0,0,[$$[$0-1],yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column),$$[$01]]);
        
break;
case 94:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-1],$$[$0]]);
        
break;
case 95:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
        
break;
case 96:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-1],yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)]);
        
break;
case 97:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)]);
        
break;
case 98:

            this.$ = yy.crearNodo('inicializando variable sin tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
        
break;
case 99:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],$$[$0-1],$$[$0]]);
        
break;
case 100:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),$$[$0-1],$$[$0]]);
        
break;
case 101:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[$$[$0-2],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
        
break;
case 102:

            this.$ = yy.crearNodo('inicializando variable con tipo',0,0,[yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column),$$[$0]]);
        
break;
case 103:
 
            $$[$0].setHijo(yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column))
            this.$ = $$[$0]
        
break;
case 104:

            $$[$0-2].setHijo(yy.crearHoja($$[$0],0,0))
            this.$ = $$[$0-2]
        
break;
case 105:
            
            this.$ = yy.crearNodo('listaIds',0,0,[yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)])
        
break;
case 106:
this.$ = yy.crearNodo('EXP',0,0,[$$[$0-1],yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)]);
break;
case 107: case 109:
this.$ = yy.crearNodo('EXP',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
break;
case 108:
this.$ = yy.crearNodo('EXP',_$[$0-2].first_line,_$[$0-2].first_column,[$$[$0-1],yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)]);
break;
case 110:
this.$ = ''
break;
case 111: case 112:
this.$ = yy.crearNodo('EXP',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0]]);
break;
case 113: case 115:

            this.$ = yy.crearNodo('asignacion',0,0,[$$[$0-3],$$[$0-1],yy.crearHoja($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)]);
        
break;
case 114: case 116:

            this.$ = yy.crearNodo('asignacion',0,0,[$$[$0-2],$$[$0],yy.crearHoja($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)]);
        
break;
case 117: case 118:

            this.$ = yy.crearNodo('asignacion',0,0,[[$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column],$$[$0]]);
        
break;
case 119:
            
            $$[$0-2].setHijo(yy.crearHoja($$[$0],0,0))
        
break;
case 120:

            this.$ = yy.crearNodo('identificadorAsignacion',0,0,[$$[$0]])
        
break;
case 121:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('identificador',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 122:
this.$ = yy.crearHoja('integer',_$[$0].first_line,_$[$0].first_column)
break;
case 123:
this.$ = yy.crearHoja('char',_$[$0].first_line,_$[$0].first_column)
break;
case 124:
this.$ = yy.crearHoja('boolean',_$[$0].first_line,_$[$0].first_column)
break;
case 125:
this.$ = yy.crearHoja('void',_$[$0].first_line,_$[$0].first_column)
break;
case 126:
this.$ = yy.crearHoja('var',_$[$0].first_line,_$[$0].first_column)
break;
case 127:
this.$ = yy.crearHoja('const',_$[$0].first_line,_$[$0].first_column)
break;
case 128:
this.$ = yy.crearHoja('global',_$[$0].first_line,_$[$0].first_column)
break;
case 129:
this.$ = yy.crearNodo('+',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 130:
this.$ = yy.crearNodo('-',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 131:
this.$ = yy.crearNodo('*',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 132:
this.$ = yy.crearNodo('/',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 133:
this.$ = yy.crearNodo('^^',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 134:
this.$ = yy.crearNodo('^',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 135:
this.$ = yy.crearNodo('<',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 136:
this.$ = yy.crearNodo('>',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 137:
this.$ = yy.crearNodo('<=',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 138:
this.$ = yy.crearNodo('>=',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 139:
this.$ = yy.crearNodo('%',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 140:
this.$ = yy.crearNodo('<>',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 141:
this.$ = yy.crearNodo('&&',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 142:
this.$ = yy.crearNodo('||',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 143:
this.$ = yy.crearNodo('==',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 144:
this.$ = yy.crearNodo('===',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0-2],$$[$0]])
break;
case 145:
this.$ = yy.crearNodo('!',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0]])
break;
case 146:
this.$ = yy.crearNodo('-',_$[$0-1].first_line,_$[$0-1].first_column,[$$[$0]])
break;
case 147:
this.$ = $$[$0-1];
break;
case 148:
this.$ = yy.crearNodo('literal',0,0,[$$[$0]])
break;
case 149:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('entero',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 150:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('decimal',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 151:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('cadena',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 152:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('caracter',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 153:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('identificacdor',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 154: case 155:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('boleano',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
case 156:

			hoja = yy.crearHoja($$[$0],_$[$0].first_line,_$[$0].first_column)
			this.$ = yy.crearNodo('nulo',_$[$0].first_line,_$[$0].first_column,[hoja])
		
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,17:$V1,66:11,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{1:[3]},{5:[1,22]},{5:[2,2],7:23,8:5,9:6,10:7,11:8,12:$V0,17:$V1,66:11,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),{13:24,16:25,17:$Va},{17:[1,27]},{17:[1,29],71:28},o($Vb,$Vc,{71:30,17:[1,31]}),{18:$Vd,37:[1,32],38:[1,33]},{17:[2,126]},{17:[2,127]},{17:[2,128]},{17:[2,122]},{17:[2,123]},{17:[2,124]},{17:[2,125]},o($Vb,[2,120]),{1:[2,1]},o($V9,[2,3]),o($V9,[2,9],{14:[1,35],15:[1,36]}),o($Ve,[2,12]),{18:[1,37]},o($Vf,[2,93],{70:38,14:$Vg,37:$Vh,38:$Vi}),o($Vf,[2,94],{70:42,14:$Vg,37:$Vh,38:$Vi}),o($V9,$Vj,{70:43,14:$Vg,15:$Vk,31:[1,44],37:$Vh,38:$Vi}),o($Vf,[2,95],{70:46,14:$Vg,37:$Vh,38:$Vi}),o($V9,$Vl,{70:47,14:$Vg,15:$Vk,31:[1,48],37:$Vh,38:$Vi}),{17:$Vm,31:$Vn,35:49,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:62,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:[1,64],75:63},o($V9,[2,10]),{16:65,17:$Va},{17:[1,66]},o($Vf,[2,88]),{17:$Vm,31:$Vn,35:67,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:68,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},o($Vf,[2,110]),o($Vf,[2,89]),o($Vf,[2,91]),{32:[1,70],66:72,67:69,68:71,76:$V2,77:$V3,78:$V4,79:$V5},{17:[1,74],73:73},o($Vf,[2,90]),o($Vf,[2,92]),{32:[1,76],66:72,67:75,68:71,76:$V2,77:$V3,78:$V4,79:$V5},o($Vf,[2,114],{14:[1,77],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM}),{17:$Vm,31:$Vn,35:94,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:95,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:96,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},o($VN,[2,148]),o($VN,[2,149]),o($VN,[2,150]),o($VN,[2,151]),o($VN,[2,152]),o($VN,$VO),o($VN,[2,154]),o($VN,[2,155]),o($VN,[2,156]),o($Vf,[2,116],{14:[1,97],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM}),o($Vb,[2,119]),o($Vb,$Vc),o($Ve,[2,11]),o($Ve,[2,13]),o($Vf,[2,107],{14:[1,98],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM}),o($Vf,[2,109],{14:[1,99],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM}),{15:$VP,32:[1,100]},{44:[1,102]},o($VQ,[2,86]),{17:[1,103]},o([5,12,14,17,37,38,39,40,41,43,46,49,52,53,58,61,62,65,76,77,78,79,80,81,82],[2,103],{15:[1,104]}),o($VR,[2,105]),{15:$VP,32:[1,105]},{44:[1,106]},o($Vf,[2,113]),{17:$Vm,31:$Vn,35:107,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:108,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:109,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:110,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:111,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:112,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:113,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:114,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:115,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:116,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:117,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:118,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:119,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:120,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:121,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:122,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},o($VS,[2,145],{84:$Vy}),o($VS,[2,146],{84:$Vy}),{32:[1,123],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},o($Vf,[2,115]),o($Vf,[2,106]),o($Vf,[2,108]),{44:[1,124]},{66:72,68:125,76:$V2,77:$V3,78:$V4,79:$V5},{9:128,10:129,17:$VT,19:126,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},o($VQ,[2,87]),{17:[1,151]},{44:[1,152]},{9:128,10:129,17:$VT,19:153,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},o([5,12,14,15,17,32,39,40,41,43,46,49,50,52,53,58,61,62,65,76,77,78,79,80,81,82,83,88,89,90,91,92,94,95,96,97,98],[2,129],{84:$Vy,85:$Vz,86:$VA,87:$VB,93:$VH}),o($VS,[2,130],{84:$Vy}),o($V11,[2,131],{84:$Vy,87:$VB}),o($V11,[2,132],{84:$Vy,87:$VB}),o($V11,[2,133],{84:$Vy,87:$VB}),o([5,12,14,15,17,32,39,40,41,43,46,49,50,52,53,58,61,62,65,76,77,78,79,80,81,82,88],[2,134],{83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM}),o($V21,[2,135],{83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,93:$VH}),o($V21,[2,136],{83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,93:$VH}),o($V21,[2,137],{83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,93:$VH}),o($V21,[2,138],{83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,93:$VH}),o($V11,[2,139],{84:$Vy,87:$VB}),o($V31,[2,140],{83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH}),o([5,12,14,15,17,32,39,40,41,43,46,49,50,52,53,58,61,62,65,76,77,78,79,80,81,82,88,95,96],[2,141],{83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,97:$VL,98:$VM}),o([5,12,14,15,17,32,39,40,41,43,46,49,50,52,53,58,61,62,65,76,77,78,79,80,81,82,88,96],[2,142],{83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,97:$VL,98:$VM}),o($V31,[2,143],{83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH}),o($V31,[2,144],{83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH}),o($VN,[2,147]),{9:128,10:129,17:$VT,19:154,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},o($VQ,[2,85]),{9:128,10:129,17:$VT,20:156,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,46:[1,155],53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},o($V41,[2,15]),o($V41,[2,16]),o($V41,[2,17]),o($V41,[2,18]),o($V41,[2,19]),o($V41,[2,20]),o($V41,[2,21]),o($V41,[2,22]),o($V41,[2,23]),o($V41,[2,24]),o($V41,[2,25]),o($V41,[2,26]),o($V41,[2,27]),{17:[1,157],71:28},o($Vb,$Vc,{71:30,17:[1,158],31:[1,159]}),{31:[1,160]},{31:[1,161]},{31:[1,162]},{44:[1,163]},{31:[1,164]},{31:[1,165]},o($V41,[2,40],{14:[1,166]}),o($V41,[2,42],{14:[1,167]}),{14:[1,169],17:$Vm,31:$Vn,35:170,42:168,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},o($VR,[2,104]),{9:128,10:129,17:$VT,19:171,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{9:128,10:129,17:$VT,20:156,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,46:[1,172],53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{9:128,10:129,17:$VT,20:156,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,46:[1,173],53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},o($V9,[2,83]),o($V41,[2,14]),o($V41,$Vj,{70:43,14:$Vg,15:$Vk,37:$Vh,38:$Vi}),o($V41,$Vl,{70:47,14:$Vg,15:$Vk,37:$Vh,38:$Vi}),{17:[1,179],31:$Vn,32:[1,174],33:175,34:176,35:177,36:178,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:180,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:181,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:182,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:128,10:129,17:$VT,19:183,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{14:[1,186],17:[1,191],54:184,55:185,56:187,57:188,66:190,69:189,74:192,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{17:$Vm,31:$Vn,35:193,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},o($V41,[2,41]),o($V41,[2,43]),o($V41,[2,44]),o($V41,[2,45]),o($V41,[2,46],{14:[1,194],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM}),{9:128,10:129,17:$VT,20:156,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,46:[1,195],53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},o($V9,[2,84]),o($V9,[2,81]),o($V41,[2,29],{14:[1,196]}),{15:[1,198],32:[1,197]},{15:[1,200],32:[1,199]},o($VQ,[2,35],{83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM}),o($VQ,[2,37]),o([15,32,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],$VO,{37:$V51,38:$V61}),{32:[1,203],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},{32:[1,204],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},{32:[1,205],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},{9:128,10:129,17:$VT,20:156,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,46:[1,206],53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{32:[1,207]},{14:[1,208]},{14:[1,210],17:$Vm,31:$Vn,35:209,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{14:[2,66]},{14:[2,67]},{17:[1,211]},{17:[1,213],71:212},o($Vb,$Vc,{71:214,17:[1,215]}),{18:$Vd,37:[1,216],38:[1,217]},{32:[1,218],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},o($V41,[2,47]),o($V9,[2,82]),o($V41,[2,28]),o($V41,[2,31],{14:[1,219]}),{17:$Vm,31:$Vn,35:220,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},o($V41,[2,33],{14:[1,221]}),{17:[1,223],36:222},{17:$Vm,31:$Vn,35:224,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:225,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},o($V41,[2,79],{14:[1,226]}),{44:[1,227]},{44:[1,228]},{61:[1,229]},{44:[1,230]},{14:[1,232],17:$Vm,31:$Vn,35:231,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{14:[1,233],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},{17:$Vm,31:$Vn,32:[2,65],35:234,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{37:$V71,38:$V81,72:235},{37:$V71,38:$V81,72:238},{15:$Vk,37:$V71,38:$V81,72:239},{37:$V71,38:$V81,72:240},{15:$Vk,37:$V71,38:$V81,72:241},{17:$Vm,31:$Vn,35:242,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:243,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{44:[1,244]},o($V41,[2,30]),o($VQ,[2,34],{83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM}),o($V41,[2,32]),o($VQ,[2,36]),{37:$V51,38:$V61},o($VQ,[2,38],{83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM}),o($VQ,[2,39],{83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM}),o($V41,[2,80]),{9:128,10:129,17:$VT,19:245,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{9:128,10:129,17:$VT,19:246,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{31:[1,247]},{9:128,10:129,17:$VT,19:248,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{14:[1,249],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},{17:$Vm,31:$Vn,35:250,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,32:[2,63],35:251,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{32:[2,64],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},{14:[2,98]},{17:$Vm,31:$Vn,35:252,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{17:$Vm,31:$Vn,35:253,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{14:[2,99]},{14:[2,101]},{14:[2,100]},{14:[2,102]},{14:[2,117],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},{14:[2,118],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},{45:254,47:255,48:256,49:$V91,51:257,52:$Va1},{9:128,10:129,17:$VT,20:156,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,46:[1,260],53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{9:128,10:129,17:$VT,20:156,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,46:[1,261],53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{17:$Vm,31:$Vn,35:262,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:128,10:129,17:$VT,20:156,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,46:[1,263],53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{17:$Vm,31:$Vn,32:[2,61],35:264,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{32:[2,60],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},{32:[2,62],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},{14:[2,111],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},{14:[2,112],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},{46:[1,265]},{46:[2,50],48:266,49:$V91,51:267,52:$Va1},{46:[2,51]},o($Vb1,[2,57]),{50:[1,268]},{17:$Vm,31:$Vn,35:269,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},o($V41,[2,68],{59:270,60:271,64:273,63:$Vc1}),o($V41,[2,72]),{32:[1,274],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},o($V41,[2,58]),{32:[2,59],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},o($V41,[2,48]),{46:[2,49]},o($Vb1,[2,56]),{9:128,10:129,17:$VT,19:275,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,46:[2,53],53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{50:[1,276],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},o($V41,[2,69]),o($V41,[2,71],{59:277,64:278,63:$Vc1}),{44:[1,279],58:[1,280]},o($Vd1,[2,77]),o($V41,[2,73],{14:[1,281]}),{9:128,10:129,17:$VT,20:156,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,46:[2,52],53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},o($Vb1,[2,54],{69:10,74:13,75:21,20:127,9:128,10:129,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,66:140,19:282,17:$VT,39:$VU,40:$VV,41:$VW,43:$VX,53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8}),o($V41,[2,70]),o($Vd1,[2,76]),{9:128,10:129,17:$VT,19:283,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{31:[1,284]},o($V41,[2,74]),o($Vb1,[2,55],{69:10,74:13,75:21,9:128,10:129,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,66:140,20:156,17:$VT,39:$VU,40:$VV,41:$VW,43:$VX,53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8}),{9:128,10:129,17:$VT,20:156,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,46:[1,285],53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{17:$Vm,31:$Vn,35:286,84:$Vo,99:$Vp,100:53,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},o($V41,[2,75]),{32:[1,287],83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM},{44:[1,288]},{9:128,10:129,17:$VT,19:289,20:127,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{9:128,10:129,17:$VT,20:156,21:130,22:131,23:132,24:133,25:134,26:135,27:136,28:137,29:138,30:139,39:$VU,40:$VV,41:$VW,43:$VX,46:[1,290],53:$VY,58:$VZ,61:$V_,62:$V$,65:$V01,66:140,69:10,74:13,75:21,76:$V2,77:$V3,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},o($Vd1,[2,78])],
defaultActions: {14:[2,126],15:[2,127],16:[2,128],17:[2,122],18:[2,123],19:[2,124],20:[2,125],22:[2,1],187:[2,66],188:[2,67],235:[2,98],238:[2,99],239:[2,101],240:[2,100],241:[2,102],256:[2,51],266:[2,49]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments          */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content   */
break;
case 4:/* skip whitespace        */
break;
case 5:return 31;
break;
case 6:return 32;
break;
case 7:return 44;
break;
case 8:return 46;
break;
case 9:return '[';
break;
case 10:return ']';
break;
case 11:return '--';
break;
case 12:return '++';
break;
case 13:return 85;
break;
case 14:return 86;
break;
case 15:return 84;
break;
case 16:return 83;
break;
case 17:return 87;
break;
case 18:return 88;
break;
case 19:return 93;
break;
case 20:return 94;
break;
case 21:return 89;
break;
case 22:return 90;
break;
case 23:return 91;
break;
case 24:return 92;
break;
case 25:return 97;
break;
case 26:return 98;
break;
case 27:return 95;
break;
case 28:return 96;
break;
case 29:return '?';
break;
case 30:return 99;
break;
case 31:return 107;
break;
case 32:return 76;
break;
case 33:return 'double';
break;
case 34:return 77;
break;
case 35:return 12;
break;
case 36:return 80;
break;
case 37:return 81;
break;
case 38:return 82;
break;
case 39:return 105;
break;
case 40:return 106;
break;
case 41:return 58;
break;
case 42:return 63;
break;
case 43:return 43;
break;
case 44:return 52;
break;
case 45:return 49;
break;
case 46:return 39;
break;
case 47:return 40;
break;
case 48:return 41;
break;
case 49:return 65;
break;
case 50:return 79;
break;
case 51:return 53;
break;
case 52:return 61;
break;
case 53:return 'define';
break;
case 54:return 'as';
break;
case 55:return 'strc';
break;
case 56:return 62;
break;
case 57:return 'try';
break;
case 58:return 'catch';
break;
case 59:return 'throw';
break;
case 60:return 38;
break;
case 61:return 50;
break;
case 62:return 14;
break;
case 63:return 15;
break;
case 64:return 37;
break;
case 65:return 18;
break;
case 66:return 102;
break;
case 67:return 101;
break;
case 68: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 103; 
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 104; 
break;
case 70:return 17;
break;
case 71:return 5;
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:--)/,/^(?:\+\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:%)/,/^(?:<>)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:===)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\?)/,/^(?:!)/,/^(?:null\b)/,/^(?:integer\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:import\b)/,/^(?:var\b)/,/^(?:const\b)/,/^(?:global\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:print\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:define\b)/,/^(?:as\b)/,/^(?:strc\b)/,/^(?:do\b)/,/^(?:try\b)/,/^(?:catch\b)/,/^(?:throw\b)/,/^(?::=)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:=)/,/^(?:\.)/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:"[^\"]*")/,/^(?:'[^\"]?')/,/^(?:[a-zA-ZñÑ_][a-zA-ZñÑ0-9_]*)/,/^(?:$)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = calc;
exports.Parser = calc.Parser;
exports.parse = function () { return calc.parse.apply(calc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}